<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Centos下LNMP环境搭建</title>
    <url>/2018/03/23/Centos-LNMP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1,.安装Nginx</p>
<p>添加CentOS 7 Nginx yum资源库</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">rpm -Uvh http:<span class="comment">//nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>安装：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">yum -y install nginx</span><br></pre></td></tr></table></figure>
<p>启动：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure>
<p>设置开机启动：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">systemctl enable nginx.service</span><br></pre></td></tr></table></figure>
<p>nginx配置：</p>
<p>默认配置文件在 /etc/nginx/conf.d/default.conf</p>
<p>我们只需要复制一份配置文件来实现根据域名来访问不同的目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cp <span class="keyword">default</span>.conf beeasy.conf</span><br></pre></td></tr></table></figure>
<p>然后beeasy.conf的配置如下：<br><img src="https://i.imgur.com/Bbs4OzM.png"></p>
<p>server_name 即配置的访问域名</p>
<p>root 后面即为访问该域名的根目录</p>
<p>该配置解决了在WordPress框架下修改固定链接后除首页其他页面404的问题。</p>
<p>重启nginx：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx.service</span><br></pre></td></tr></table></figure>
<p>2.安装php7.0</p>
<p>添加CentOS 7 php7 yum资源库</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https:<span class="comment">//dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span></span><br><span class="line">rpm -Uvh https:<span class="comment">//mirror.webtatic.com/yum/el7/webtatic-release.rpm</span></span><br></pre></td></tr></table></figure>
<p>安装：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">yum install php70w php70w-opcache</span><br><span class="line">yum install php70w-fpm php70w-opcache</span><br><span class="line">yum install php70w-mysql</span><br></pre></td></tr></table></figure>
<p>你也可以安装一些其他扩展：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">yum install yum-plugin-replace</span><br><span class="line">yum replace php-common --replace-with=php70w-common</span><br></pre></td></tr></table></figure>
<p>还包涵一些其他的扩展包，可以根据需求安装：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php70w-dba，php70w-devel，php70w-embedded，php70w-enchant，php70w-gd，php70w-pdo等。。</span><br></pre></td></tr></table></figure>
<p>可参考<a href="https://webtatic.com/packages/php70/">https://webtatic.com/packages/php70/</a></p>
<p>3.安装mysql</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">yum -y install mysql</span><br></pre></td></tr></table></figure>
<p>安装mysql-server</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">yum -y install mysql-server</span><br></pre></td></tr></table></figure>
<p>虽然可能会报错，但是不要慌</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">wget http:<span class="comment">//dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span></span><br><span class="line"></span><br><span class="line">rpm -ivh mysql-community-release-el7-<span class="number">5</span>.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure>
<p>然后需要确定几次，都按y回车即可</p>
<p>安装mysql扩展包：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">yum -y install mysql-connector-odbc mysql-devel libdbi-dbd-mysql</span><br></pre></td></tr></table></figure>
<p>重启对应服务：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">service mysqld restart</span><br><span class="line"></span><br><span class="line">service php-fpm start</span><br><span class="line"></span><br><span class="line">service nginx restart</span><br></pre></td></tr></table></figure>
<p>初次安装mysql是没有密码的,我们要设置密码，mysql的默认账户为root</p>
<p>设置 MySQL 数据 root 账户的密码：</p>
<p>命令：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>
<p>当出现如下提示时候直接按回车：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Enter current password <span class="keyword">for</span> root</span><br></pre></td></tr></table></figure>
<p>出现如下再次回车：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Set root password? [Y/n]</span><br></pre></td></tr></table></figure>
<p>出现如下提示输入你需要设置的密码，这里输入了root,输入密码是不显示的，回车后再输入一次确认：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Remove anonymous users? [Y/n]</span><br><span class="line">Disallow root login remotely? [Y/n]</span><br><span class="line">Remove test database <span class="keyword">and</span> access to it? [Y/n]</span><br><span class="line">Reload privilege tables now? [Y/n]</span><br></pre></td></tr></table></figure>
<p>以上的教程都是搭建完成以后写的，如果存在问题，还请指出。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>nginx</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 配置https协议</title>
    <url>/2018/03/23/Centos7-https/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本文用的是Let’s Encrypt数字证书认证机构免费提供的ssl证书。letsencrypt基于ACME协议自助颁发证书的过程由letsencrypt提供一个工具完成，工具名称现在叫做：certbot，在linux下certbot工具安装后也就是certbot命令。</p>
<span id="more"></span>
<p>1,.安装certbot用于生成证书</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">##安装epel-release扩展包</span></span><br><span class="line">yum install epel-release</span><br><span class="line"><span class="comment">##更新yum缓存</span></span><br><span class="line">yum makecache</span><br><span class="line"><span class="comment">##直接yum安装certbot</span></span><br><span class="line">yum install certbot</span><br></pre></td></tr></table></figure>
<p>2.使用certbot申请Let’s Encrypt免费的ssl证书</p>
<p>配置Let’s Encrypt有两种模式，standalone和webroot。至于两种模式的区别可自行百度一下。我们这里使用的是webroot模式。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">##--webroot指定你的网站的根目录</span></span><br><span class="line">certbot certonly --webroot -w /<span class="keyword">var</span>/www/blog -d blog.ibeeasy.cn</span><br></pre></td></tr></table></figure>
<p>对于nginx而言web根目录下的隐藏目录默认情况下是不允许访问的，所以nginx情况下再执行非standalone模式申请ssl证书之前，需要将nginx网站根目录下的.well-known隐藏目录设置成允许访问。</p>
<p>申请过程中可能会需要输入邮箱接受通知，还有一个同意协议的选项，选y。</p>
<p>不出意外的话，证书文件会在以下的位置：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/etc/letsencrypt/live/你的域名/</span><br></pre></td></tr></table></figure>
<p>3.配置nginx</p>
<p>以前我们使用的是80（http）端口，而https协议是443端口，所以我们要将80端口转发到443端口，在你当前网站的配置文件里修改配置如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">listen <span class="number">80</span>;</span><br><span class="line">server_name blog.ibeeasy.cn;</span><br><span class="line">rewrite ^(.*) https:<span class="comment">//$server_name$1 permanent; </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen <span class="number">443</span> ssl http2;</span><br><span class="line">server_name  blog.ibeeasy.cn;</span><br><span class="line">   <span class="comment">#告诉浏览器当前页面禁止被frame</span></span><br><span class="line">add_header X-Frame-Options DENY;</span><br><span class="line"><span class="comment">#告诉浏览器不要猜测mime类型</span></span><br><span class="line">add_header X-Content-Type-Options nosniff;</span><br><span class="line"><span class="comment">#证书路径</span></span><br><span class="line">ssl_certificate /etc/letsencrypt/live/blog.ibeeasy.cn/fullchain.pem;</span><br><span class="line"><span class="comment">#私钥路径</span></span><br><span class="line">ssl_certificate_key /etc/letsencrypt/live/blog.ibeeasy.cn/privkey.pem;</span><br><span class="line"><span class="comment">#安全链接可选的加密协议</span></span><br><span class="line">ssl_protocols TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line"><span class="comment">#可选的加密算法,顺序很重要,越靠前的优先级越高.</span></span><br><span class="line">ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-RC4-SHA:!ECDHE-RSA-RC4-SHA:ECDH-ECDSA-RC4-SHA:ECDH-RSA-RC4-SHA:ECDHE-RSA-AES256-SHA:HIGH:!RC4-SHA:!aNULL:!eNULL:!LOW:!<span class="number">3</span>DES:!MD5:!EXP:!CBC:!EDH:!kEDH:!PSK:!SRP:!kECDH;</span><br><span class="line"><span class="comment">#在 SSLv3 或 TLSv1 握手过程一般使用客户端的首选算法,如果启用下面的配置,则会使用服务器端的首选算法.</span></span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line"><span class="comment">#储存SSL会话的缓存类型和大小</span></span><br><span class="line">ssl_session_cache shared:SSL:<span class="number">10</span>m;</span><br><span class="line"><span class="comment">#缓存有效期</span></span><br><span class="line">ssl_session_timeout <span class="number">60</span>m;</span><br><span class="line">   <span class="comment">#其他配置照原先的不变，这里就不列出来了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置完成后重启Nginx或重新加载配置：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#或重启nginx</span></span><br><span class="line">systemctl restart nginx</span><br><span class="line"><span class="comment">#重新加载配置</span></span><br><span class="line">systemctl reload nginx</span><br></pre></td></tr></table></figure>
<p>至此，https协议就部署完成了，如果还是无法访问，请确定443端口是否开启，或者是否添加安全组443端口的入方向。</p>
<p>4.添加脚本执行证书更新</p>
<p>因为ssl证书的有效期是90天，所以我们要设置一个定时任务来自动更新证书，证书更新的命令如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">./letsencrypt-auto renew</span><br></pre></td></tr></table></figure>
<p>如果要指定更新某个域名的证书, 则要使用 certonly 参数,：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">./letsencrypt-auto certonly --webroot --renew-by-<span class="keyword">default</span> --email admin@ibeeasy.cn -w /<span class="keyword">var</span>/www/blog -d blog.ibeeasy.cn -d a.ibeeasy.cn</span><br></pre></td></tr></table></figure>
<p>当然，官方也提供了 cron 运行脚本的方式可以实现定时续期，脚本如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="comment">#停止 nginx 服务,使用 --standalone 独立服务器验证需要停止当前 web server.</span></span><br><span class="line">systemctl stop nginx</span><br><span class="line"><span class="keyword">if</span> ! /path/to/letsencrypt-auto renew -nvv --standalone &gt; /<span class="keyword">var</span>/log/letsencrypt/renew.log <span class="number">2</span>&gt;&amp;<span class="number">1</span> ; then</span><br><span class="line"><span class="keyword">echo</span> Automated renewal failed:</span><br><span class="line">cat /<span class="keyword">var</span>/log/letsencrypt/renew.log</span><br><span class="line"><span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"><span class="comment">#启动 nginx</span></span><br><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure>
<p>将以上脚本保存为 letsencrypt-renew.sh</p>
<p>添加可执行权限：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">chmod +x letsencrypt-renew.sh</span><br></pre></td></tr></table></figure>
<p>编辑 crontab 配置文件或执行<code> crontab -e</code> 添加 cron 任务：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nano /etc/crontab</span><br></pre></td></tr></table></figure>
<p>我这里设置为每月1号0点执行此脚本.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#分 时 日 月 星期 执行用户 执行命令</span></span><br><span class="line"> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> *  *   root/脚本目录/letsencrypt-renew.sh</span><br></pre></td></tr></table></figure>
<p>加入后Ctrl+X保存退出即可。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker使用（Windows系统）</title>
    <url>/2018/03/23/Docker-Windows/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>首先从Docker官网上面下载最新版本点击前往</p>
<p>安装过程可能会有点长，因为需要在线下载很多文件。</p>
<span id="more"></span>
<p>安装好了之后桌面上会出现一个这样的图标：</p>
<p><img src="https://i.imgur.com/ddozzz9.png"></p>
<p>双击之后出现running就ok了</p>
<p>然后打开命令提示符输入：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line"></span><br><span class="line">PS C:\WINDOWS\system32&gt; docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:   <span class="number">17.12</span>.<span class="number">0</span>-ce</span><br><span class="line"> API version:   <span class="number">1.35</span></span><br><span class="line"> Go version:go1.<span class="number">9.2</span></span><br><span class="line"> Git commit:c97c6d6</span><br><span class="line"> Built: Wed Dec <span class="number">27</span> <span class="number">20</span>:<span class="number">05</span>:<span class="number">22</span> <span class="number">2017</span></span><br><span class="line"> OS/Arch:   windows/amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:  <span class="number">17.12</span>.<span class="number">0</span>-ce</span><br><span class="line">  API version:  <span class="number">1.35</span> (minimum version <span class="number">1.12</span>)</span><br><span class="line">  Go version:   go1.<span class="number">9.2</span></span><br><span class="line">  Git commit:   c97c6d6</span><br><span class="line">  Built:Wed Dec <span class="number">27</span> <span class="number">20</span>:<span class="number">12</span>:<span class="number">29</span> <span class="number">2017</span></span><br><span class="line">  OS/Arch:  linux/amd64</span><br><span class="line">  Experimental: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>会出现很多版本相关信息。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PS C:\WINDOWS\system32&gt; docker images <span class="comment">//查看当前已有镜像</span></span><br><span class="line">REPOSITORY  TAG IMAGE ID</span><br><span class="line">CREATED SIZE</span><br><span class="line">centos  latest  <span class="number">2</span>d194b392dd1</span><br><span class="line"><span class="number">32</span> hours ago195MB</span><br><span class="line">docker4w/nsenter-dockerdlatest  cae870735e91</span><br><span class="line"><span class="number">4</span> months ago187kB</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/diligentyang/centos6.<span class="number">7</span>_nginx_1.<span class="number">10</span>_php5.<span class="number">6.29</span>   v1.<span class="number">0072258802250</span></span><br><span class="line"><span class="number">14</span> months ago   <span class="number">854</span>MB</span><br></pre></td></tr></table></figure>
<p>关于镜像可以使用命令：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">docker search centos</span><br></pre></td></tr></table></figure>
<p>来查找与centos相关的镜像</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">    PS C:\WINDOWS\system32&gt; docker search centos</span><br><span class="line">    NAME   DESCRIPTION STARS   OFFICIAL</span><br><span class="line">       AUTOMATED</span><br><span class="line">    centos The official build of CentOS.   <span class="number">4079</span>[OK]</span><br><span class="line">    </span><br><span class="line">    ansible/centos7-ansibleAnsible on Centos7  <span class="number">105</span></span><br><span class="line">···</span><br><span class="line">其中越靠前是STARS越多，相当于使用的人最多，当我们选择了一个镜像后查看它的AUTOMATED就能直接拉取镜像</span><br><span class="line">```php</span><br><span class="line">    docker pull registry.cn-hangzhou.aliyuncs.com/diligentyang/centos6.<span class="number">7</span>_nginx_1.<span class="number">10</span>_php5.<span class="number">6.29</span>:v1.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>这里使用的是一个阿里云搭建的php5.6+nginx1.10的镜像</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$ docker run -p <span class="number">80</span>:<span class="number">80</span> --name ali -it <span class="number">5</span>a7e /bin/bash</span><br></pre></td></tr></table></figure>
<p>docker run ：创建一个新的容器并运行一个命令，常用参数:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">- -i: 以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line">- -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用</span><br><span class="line">- –name=”nginx-lb”: 为容器指定一个名称；</span><br><span class="line">- -P 将容器的<span class="number">80</span>端口映射到主机随机端口。</span><br><span class="line">- -p <span class="number">80</span>:<span class="number">80</span> 将容器的<span class="number">80</span>端口映射到主机的<span class="number">80</span>端口</span><br><span class="line">- -v 映射主机目录和容器目录</span><br></pre></td></tr></table></figure>
<p>其中 5a7e为镜像的IMAGE ID</p>
<p>如果出现报错的情况：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$ docker run -p <span class="number">80</span>:<span class="number">80</span> --name ali -it <span class="number">5</span>a7e /bin/bash</span><br><span class="line">cannot enable tty mode on non tty input</span><br></pre></td></tr></table></figure>
<p>总结出两条解决方案</p>
<p>1: 在命令前面加上winpty<br>2: 首先执行 docker-machine ssh default</p>
<p>不出意外的话就能直接进入到镜像了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[root@ec600fcf672e /]<span class="comment"># ls</span></span><br><span class="line">bin   dev  home  lib64  lost+found  mnt   opt   root  selinux  sys  usr</span><br><span class="line">boot  etc  lib   local  media   mysql-community-release-el7-<span class="number">5</span>.noarch.rpm  proc  sbin  srv  tmp  <span class="keyword">var</span></span><br></pre></td></tr></table></figure>
<p>该镜像已经配置好了php环境，所以我们只需要：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[root@ec600fcf672e /]<span class="comment"># php-fpm</span></span><br><span class="line">[root@ec600fcf672e /]<span class="comment"># service nginx</span></span><br></pre></td></tr></table></figure>
<p>就能启动了</p>
<p>在浏览器地址栏输入localhost 或者你的内网ip如果出现phpinfo的相关信息就说明启动成功。</p>
<p>其中网站根目录为  /var/www</p>
<p>如果想退出这个容器（在后台运行）需要按下ctrl+p ctrl+q （偶尔会失效。。）</p>
<p>如果想要切回去继续工作只需要docker attach 容器id（可以为前几位，只要和别的区分开就好）</p>
<p>查看所有容器：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PS C:\WINDOWS\system32&gt; docker ps -a</span><br><span class="line">CONTAINER IDIMAGE   COMMAND CREATED STATUS   PORTS</span><br><span class="line">  NAMES</span><br><span class="line">ec600fcf672e0722<span class="string">&quot;/bin/bash&quot;</span> About an hour ago   Up About an hour <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span>-&gt;<span class="number">8</span></span><br><span class="line">tcp   ali</span><br><span class="line">fe985915775ecentos  <span class="string">&quot;ls&quot;</span><span class="number">6</span> hours ago Exited (<span class="number">0</span>) <span class="number">6</span> hours ago</span><br></pre></td></tr></table></figure>
<p>删除不用的容器</p>
<p>docker rm 容器id</p>
<p>如果容器正在运行可以使用docker stop 容器id，关闭容器后再删除。或者直接使用docker rm -f 容器id</p>
<p>删除镜像</p>
<p>docker rmi 镜像id</p>
<p>那么如何将本地目录映射到容器里进行调试呢</p>
<p>可以在启动容器的加上一个-v参数，映射主机目录和容器目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">docker run -p <span class="number">80</span>:<span class="number">80</span> --name test -v /e/wamp/www:/<span class="keyword">var</span>/www -it ec60 /bin/bash</span><br></pre></td></tr></table></figure>
<p>由于我们之前已经配置并启动了镜像，那么我们可以将本地的项目拷贝到容器里：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$ docker cp /e/wamp/www/test ec60:/<span class="keyword">var</span>/www</span><br></pre></td></tr></table></figure>
<p>注意项目的路径写法。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel使用（Cache）</title>
    <url>/2018/03/23/Laravel-Cache/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1,Cache的使用<br>Laravel目前支持流行的缓存后端包括Memcached和Redis等，下面说的是数据库缓存：</p>
<span id="more"></span>
<p>使用database缓存驱动时，你需要设置一张表包含缓存缓存项。下面是该表的Schema声明：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Schema::create(<span class="string">&#x27;cache&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Blueprint <span class="variable">$table</span></span>) </span>&#123;</span><br><span class="line">			<span class="variable">$table</span>-&gt;string(<span class="string">&#x27;key&#x27;</span>)-&gt;unique();</span><br><span class="line">			<span class="variable">$table</span>-&gt;text(<span class="string">&#x27;value&#x27;</span>);</span><br><span class="line">			<span class="variable">$table</span>-&gt;integer(<span class="string">&#x27;expiration&#x27;</span>);</span><br><span class="line">		&#125;);</span><br></pre></td></tr></table></figure>
<p>首先创建表迁移：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php artisan make:migration create_cache_table</span><br></pre></td></tr></table></figure>
<p>再将表迁移内容替换进去，就是第一段替换</p>
<p>执行表迁移：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PS E:\wamp\www\blog&gt; php artisan migrate</span><br><span class="line">Migrating: <span class="number">2018_03_22_160436</span>_create_cache_table</span><br><span class="line">Migrated:  <span class="number">2018_03_22_160436</span>_create_cache_table</span><br></pre></td></tr></table></figure>
<p>那么就可以使用数据库缓存了</p>
<p>在需要使用的控制器里使用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Cache</span>；</span><br></pre></td></tr></table></figure>
<p>比如要将文章的详情页存入到数据库缓存，并且在没有该详情页缓存的时候添加进去：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"><span class="variable">$id</span></span>) </span>&#123;</span><br><span class="line">		<span class="variable">$result</span>[<span class="string">&#x27;result&#x27;</span>] = Cache::remember(<span class="string">&#x27;news_&#x27;</span> . <span class="variable">$id</span>, <span class="number">10060</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$id</span></span>) </span>&#123;<span class="comment">//news_$id用于区分不同的文章详情，10060表示缓存时间，单位分，</span></span><br><span class="line">后面是缓存内容，使用闭包函数<span class="keyword">use</span>连接文章<span class="title">id</span>调用模型来获取数据</span><br><span class="line"></span><br><span class="line">			<span class="title">return</span> <span class="title">Index</span>::<span class="title">where</span>(&#x27;<span class="title">id</span>&#x27;, $<span class="title">id</span>)-&gt;<span class="title">first</span>();</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		<span class="variable">$result</span>[<span class="string">&#x27;category_id&#x27;</span>] = <span class="variable">$result</span>[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;category_id&#x27;</span>];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> view(<span class="string">&#x27;home.index.show&#x27;</span>, <span class="variable">$result</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>Cache的remember方法第一个参数代表的是缓存的key，第二个参数代表缓存的时间，第三个参数表示的是在没有该key的情况下设置的默认值，该参数支持闭包函数。</p>
<p>你也可使用remember和forever方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$value</span> = Cache::rememberForever(<span class="string">&#x27;news_&#x27;</span> . <span class="variable">$id</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$id</span></span>) </span>&#123; <span class="keyword">return</span> Index::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$id</span>)-&gt;first();&#125;);</span><br></pre></td></tr></table></figure>
<p>来永久缓存数据。</p>
<p>扩展：比如一些导航栏是每个页面都要获取，我们也可以将其加入到缓存中：</p>
<p>在之前的文章里，公用的数据我们都放在app/Providers/目录下的服务提供者文件里统一加载数据。</p>
<p>首先在服务提供者的文件里：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">//基于闭包的composer</span></span><br><span class="line">	view()-&gt;composer(<span class="string">&#x27;layouts.home&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$view</span></span>) </span>&#123;</span><br><span class="line">		<span class="variable">$config</span> = DB::table(<span class="string">&#x27;config&#x27;</span>)<span class="comment">//获取网站的全局配置参数，如客服电话，公司地址等。。</span></span><br><span class="line">			-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">			-&gt;first();</span><br><span class="line">		<span class="variable">$banner</span> = DB::table(<span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">			-&gt;where(<span class="string">&#x27;is_see&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">			-&gt;get();</span><br><span class="line">		<span class="variable">$view</span>-&gt;with(<span class="string">&#x27;config&#x27;</span>, <span class="variable">$config</span>)-&gt;with(<span class="string">&#x27;banner&#x27;</span>, <span class="variable">$banner</span>);</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将站点配置$config和$banner加入到缓存中：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">//基于闭包的composer</span></span><br><span class="line">	view()-&gt;composer(<span class="string">&#x27;layouts.home&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$view</span></span>) </span>&#123;</span><br><span class="line">		<span class="variable">$config</span> = Cache::remember(<span class="string">&#x27;config&#x27;</span>, <span class="number">10060</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//获取key=config的数据，如果没有则使用闭包函数从数据库获取并存入缓存</span></span><br><span class="line">			<span class="keyword">return</span> DB::table(<span class="string">&#x27;config&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="number">1</span>)-&gt;first();</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="variable">$banner</span> = Cache::remember(<span class="string">&#x27;banner&#x27;</span>, <span class="number">10060</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> DB::table(<span class="string">&#x27;image&#x27;</span>)-&gt;where(<span class="string">&#x27;is_see&#x27;</span>, <span class="number">1</span>)-&gt;get();</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="variable">$view</span>-&gt;with(<span class="string">&#x27;config&#x27;</span>, <span class="variable">$config</span>)-&gt;with(<span class="string">&#x27;banner&#x27;</span>, <span class="variable">$banner</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么在第一次访问的时候借用laravel-debugbar调试器是这样的：</p>
<p><img src="https://i.imgur.com/UGjLq7y.png"></p>
<p>当第二次访问的时候：</p>
<p><img src="https://i.imgur.com/1nivQRB.png"></p>
<p>因为之前的全局数据以及文章详情都存入到了缓存中，所以没有查询数据库。</p>
<p><strong>windows下使用Redis缓存</strong></p>
<p>首先需要下载Redis服务Windows版本，因为官方不提供windows版本，所以只能再github上下载。</p>
<p>下载地址：<a href="http://github.com/MSOpenTech/redis/tags">http://github.com/MSOpenTech/redis/tags</a></p>
<p>下载时选择msi文件安装，可避免之后使用的时候要一直保持窗口打开才行。</p>
<p>安装过程基本上能打钩的都打上勾。</p>
<p>然后在计算机管理→服务与应用程序→服务  可以看到Redis服务，可直接点击启动服务或停止服务。</p>
<p>同时你也可以使用命令行来开启Redis服务，不过需要命令行窗口常开。</p>
<p>在Reids安装目录输入命令<code>redis-server.exe redis.windows.conf</code></p>
<p>出现Redis服务相关信息就说明启动成功。</p>
<p>测试方法也可自行百度。</p>
<p>在Laravel5 中使用Redis缓存，首先需要在config/databasez中配置redis缓存服务（默认已经配置好了）<br>    ‘redis’ =&gt; [</p>
<pre><code>    &#39;client&#39; =&gt; &#39;predis&#39;,

    &#39;default&#39; =&gt; [
        &#39;host&#39; =&gt; env(&#39;REDIS_HOST&#39;, &#39;127.0.0.1&#39;),
        &#39;password&#39; =&gt; env(&#39;REDIS_PASSWORD&#39;, null),
        &#39;port&#39; =&gt; env(&#39;REDIS_PORT&#39;, 6379),
        &#39;database&#39; =&gt; 0,
    ],

],
</code></pre>
<p>然后在我们的config/cache.php中将驱动改为redis即可。</p>
<p>下载辅助工具RedisDesktopManager，能够在windows环境下更清楚的查看缓存。</p>
<p>例如：</p>
<pre><code>    view()-&gt;composer(&#39;home/*&#39;, function ($view) &#123;

        $carousel = Cache::remember(&#39;carousel&#39;, 10060, function () &#123;
            return Carousel::get();
        &#125;);

        // // 分配数据
        $assign = compact(&#39;carousel&#39;);
        $view-&gt;with($assign);
    &#125;);
</code></pre>
<p>将数据加入到redis缓存中，同时在RedisDesktopManager工具中我们可以看到：</p>
<p><img src="https://i.imgur.com/YsvEhKV.png"></p>
<p>说明已经存储到redis服务中。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>cache</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel使用（事件监听）</title>
    <url>/2018/05/12/Laravel-Event/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr>
<p><strong>1.事件监听</strong></p>
<p>有时候我们需要在执行完一步操作后自动执行下一步事件，比如在用户购买商品后增加到购买记录的同时将商品增加到订单表中。</p>
<span id="more"></span>
<p>首先需要注册事件/监听器，在<code>\app\Providers\EventServiceProvider.php</code>文件中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="variable">$listen</span> = [</span><br><span class="line">	<span class="string">&#x27;SocialiteProviders\Manager\SocialiteWasCalled&#x27;</span> =&gt; [</span><br><span class="line">		<span class="string">&#x27;SocialiteProviders\Weibo\WeiboExtendSocialite@handle&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;SocialiteProviders\QQ\QqExtendSocialite@handle&#x27;</span>,</span><br><span class="line">	],</span><br><span class="line">	<span class="string">&#x27;Illuminate\Auth\Events\Login&#x27;</span> =&gt; [</span><br><span class="line">		<span class="string">&#x27;App\Listeners\LoginStoreSession&#x27;</span>,</span><br><span class="line">	],</span><br><span class="line"><span class="comment">//增加一个订单触发的事件</span></span><br><span class="line">	<span class="string">&#x27;App\Event\Order&#x27;</span> =&gt; [</span><br><span class="line">	<span class="comment">//这里是事件监听，可以是多个，即一个事件可以对应多个监听器</span></span><br><span class="line">		<span class="string">&#x27;App\Listeners\CreateOrder&#x27;</span>,</span><br><span class="line">	],</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>之后执行<code>php artisan event:generate</code> 会分别自动在<code> app/Events</code>和<code>app/Listensers</code>目录下生成 Order.php和CreateOrder.php文件。<br>Order.php文件中是定义变量与监听器进行变量传递的过程，其中变量可以是表单数据，也可以是自带的数据参数，我们这里自定义一个$data数组用于将数据写入写入订单</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">	<span class="keyword">use</span> <span class="title">Dispatchable</span>, <span class="title">InteractsWithSockets</span>, <span class="title">SerializesModels</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Get the channels the event should broadcast on.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> \Illuminate\Broadcasting\Channel|array</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">broadcastOn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> PrivateChannel(<span class="string">&#x27;channel-name&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后去<code>app\Listeners</code>目录CreateOrder.php文件中创建各种要做的事件监听类。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create the event listener.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handle the event.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  Order  $event</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">Order <span class="variable">$event</span></span>) </span>&#123;</span><br><span class="line">	<span class="variable">$data</span> = <span class="variable">$event</span>-&gt;data;</span><br><span class="line">	DB::table(<span class="string">&#x27;orders&#x27;</span>)-&gt;insert(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>监听器在handle方法中接收事件的实例，你可以获取到Order实例中的所有属性以及使用。我们这里是直接将$data数据直接从实例Order中拿到并使用。</p>
<p>那么事件与监听器都设置好了，接下来就是如何触发事件即监听：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">use</span> <span class="title">App</span>\<span class="title">Event</span>\<span class="title">Order</span>;<span class="comment">//使用到的事件</span></span><br><span class="line">   </span><br><span class="line">   DB::table(<span class="string">&#x27;purchase_records&#x27;</span>)-&gt;insert(<span class="variable">$data</span>);<span class="comment">//这是将数据加入购买记录</span></span><br><span class="line">Event::fire(<span class="keyword">new</span> Order(<span class="variable">$data</span>));<span class="comment">//增加成功后触发事件Order同时带上数据$data</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>当然，你也可以使用助手函数来增加触发事件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">event(<span class="keyword">new</span> Order(<span class="variable">$data</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>事件监听</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel使用（队列）</title>
    <url>/2018/05/24/Laravel-Queue/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>首先是使用队列的原因</strong></p>
<p>例如</p>
<pre><code>请求时间比较长，影响用户体验

可以通过异步来处理

不确定一次执行就能成功
</code></pre>
<span id="more"></span>
<p><strong>使用</strong></p>
<p>首先要生成队列表并创建表迁移</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php artisan queue:table</span><br><span class="line"></span><br><span class="line">php artisan migrate</span><br></pre></td></tr></table></figure>
<p>然后创建需要操作的队列，例如发邮件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php artisan make:job SendResetEmail</span><br></pre></td></tr></table></figure>
<p>一下是部分代码可根据个人需求做调整：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">SendResetEmail</span> <span class="keyword">implements</span> <span class="title">ShouldQueue</span> </span>&#123;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Dispatchable</span>, <span class="title">InteractsWithQueue</span>, <span class="title">Queueable</span>, <span class="title">SerializesModels</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$email</span>;<span class="comment">//队列类的属性只会在本类中调用 所以不需要设置public属性</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$name</span>;  <span class="comment">//protected 属性即可</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new job instance.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$email</span>, <span class="variable">$name</span></span>) </span>&#123;<span class="comment">//用于传递控制器中的邮箱地址以及其他参数，可以为对象</span></span><br><span class="line">	<span class="keyword">$this</span>-&gt;email = <span class="variable">$email</span>;</span><br><span class="line">	<span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Execute the job.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;<span class="comment">//获取邮箱地址以及其他参数 调用Mail类进行邮件发送</span></span><br><span class="line">	<span class="variable">$email</span> = <span class="keyword">$this</span>-&gt;email;</span><br><span class="line">	<span class="variable">$name</span> = <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">	<span class="variable">$token</span> = str_random(random_int(<span class="number">20</span>, <span class="number">30</span>));</span><br><span class="line">	<span class="variable">$url</span> = <span class="string">&quot;http://www.test.cn/password/reset?name=<span class="subst">$name</span>&amp;token=<span class="subst">$token</span>&quot;</span>;</span><br><span class="line">	Cache::put(<span class="string">&quot;user_<span class="subst">$name</span>&quot;</span>, <span class="variable">$token</span>, <span class="number">10</span>); <span class="comment">//将token进行缓存</span></span><br><span class="line">	Mail::send(<span class="string">&#x27;emails.password&#x27;</span>, [<span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$name</span>, <span class="string">&#x27;url&#x27;</span> =&gt; <span class="variable">$url</span>], <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$message</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$email</span></span>) </span>&#123;</span><br><span class="line">		<span class="variable">$to</span> = <span class="variable">$email</span>;</span><br><span class="line">		<span class="variable">$message</span>-&gt;to(<span class="variable">$to</span>)-&gt;subject(<span class="string">&#x27;找回密码&#x27;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">failed</span>(<span class="params"><span class="built_in">Exception</span> <span class="variable">$exception</span></span>) </span>&#123;<span class="comment">//队列执行失败执行的操作</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>调用的时候只需要在控制层使用dispatch方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">use</span> <span class="title">App</span>\<span class="title">Jobs</span>\<span class="title">SendResetEmail</span>;</span><br><span class="line">...</span><br><span class="line">   <span class="variable">$result</span> = <span class="keyword">$this</span>-&gt;dispatch(<span class="keyword">new</span> SendResetEmail(<span class="variable">$user</span>-&gt;EMail, <span class="variable">$user</span>-&gt;ID));</span><br></pre></td></tr></table></figure>
<p>当然，在调用前必须开启监听队列：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php artisan queue:</span><br><span class="line"></span><br><span class="line">    queue:work 默认只执行一次队列请求, 当请求执行完成后就终止；</span><br><span class="line">    </span><br><span class="line">    queue:listen 监听队列请求，只要运行着，就能一直接受请求，除非手动终止；</span><br><span class="line">    </span><br><span class="line">    queue:work --daemon同listen一样，不同的是work不需要再次加载框架，直接运行任务，一般推荐使用这个来处理队列监听。</span><br><span class="line">    </span><br><span class="line">    注：使用 queue:work --daemon ，当更新代码的时候，需要停止，然后重新启动，这样才能把修改的代码应用上。</span><br></pre></td></tr></table></figure>
<blockquote>
<p>那么什么时候使用 queue:listen 什么时候使用 queue:work？<br>Laravel 5.3 的文档已经不写 queue:listen这个指令怎么用了，所以你可以看出来可能官方已经不怎么建议使用 queue:listen了，但是在本地调试的时候要使用 queue:listen，因为 queue:work在启动后，代码修改，queue:work不会再 Load 上下文，但是 queue:listen仍然会重新 Load 新代码。</p>
</blockquote>
<p>其余情况全部使用 queue:work吧，因为效率更高。</p>
<p>以下为常用的Artisan命令开启队列监听：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php artisan queue:work --daemon --quiet --queue=<span class="keyword">default</span> --delay=<span class="number">3</span> --sleep=<span class="number">3</span> --tries=<span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>–daemon<br>supervisor 中一般要加这个 option，可以节省 CPU 使用。</p>
<p>–quiet</p>
<p>不输出任何内容</p>
<p>–delay=3</p>
<p>一个任务失败后，延迟多长时间后再重试，单位是秒。这个值的设定我个人建议不要太短，因为一个任务失败（比如网络原因），重试时间太短可能会出现连续失败的情况。</p>
<p>–sleep=3</p>
<p>去 Redis 中拿任务的时候，发现没有任务，休息多长时间，单位是秒。这个值的设定要看你的任务是否紧急，如果是那种非常紧急的任务，不能等待太长时间。</p>
<p>–tries=3</p>
<p>定义失败任务最多重试次数。这个值的设定根据任务的重要程度来确定，一般 3 次比较适合。</p>
<p>一些其他心得：</p>
<p>在开发环境我们想测试的时候，可以把 Queue driver 设置成为 sync，这样队列就变成了同步执行，方便调试队列里面的任务。<br>Job 里面的 handle 方法是可以注入别的 class 的，就像在 Controller action 里面也可以注入一样。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel使用（UEditor,表单验证）</title>
    <url>/2018/03/23/Laravel-UEditor-form/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1.富文本编辑器（UEditor）<br>laravel的依赖管理工具composer中可以快速的帮助我们集成ueditor到框架中，配置过程：</p>
<span id="more"></span>
<p>在laravel项目根目录配置composer.json文件，在require中写入：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;stevenyangecho/laravel-u-editor&quot;</span>: <span class="string">&quot;~1.4&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后在cmd模式下输入：composer update （需要将composer配置为全局变量）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PS E:\wamp\www\blog&gt; composer update</span><br><span class="line">Loading composer repositories with package information</span><br><span class="line">Updating dependencies (including <span class="keyword">require</span>-dev)</span><br><span class="line">Package operations: <span class="number">3</span> installs, <span class="number">31</span> updates, <span class="number">0</span> removals</span><br><span class="line"> - Updating symfony/polyfill-mbstring (v1.<span class="number">6.0</span> =&gt; v1.<span class="number">7.0</span>): Downloading (<span class="number">100</span>%)</span><br><span class="line"> - Updating symfony/<span class="keyword">var</span>-dumper (v3.<span class="number">3.13</span> =&gt; v3.<span class="number">4.6</span>): Downloading (<span class="number">100</span>%)</span><br><span class="line"> - Updating symfony/debug (v3.<span class="number">3.13</span> =&gt; v3.<span class="number">4.6</span>): Downloading (<span class="number">100</span>%)</span><br><span class="line">.......<span class="comment">//省略部分内容</span></span><br><span class="line">Package manifest generated successfully.</span><br></pre></td></tr></table></figure>
<p>更新完成之后，修改laravel的配置文件（config/app.php）:</p>
<p>在 “providers” 这个key 最后加上 ：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Stevenyangecho\UEditor\UEditorServiceProvider::class</span><br></pre></td></tr></table></figure>
<p>在”aliases” 这个key最后加上：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;UEditor&#x27;</span>=&gt;Stevenyangecho\UEditor\UEditorServiceProvider::class</span><br></pre></td></tr></table></figure>
<p>配置完之后，命令提示符进入项目的根目录：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PS E:\wamp\www&gt; cd blog</span><br><span class="line">PS E:\wamp\www\blog&gt; php artisan vendor:publish</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  [Symfony\Component\Debug\<span class="built_in">Exception</span>\FatalThrowableError]</span><br><span class="line">  <span class="class"><span class="keyword">Class</span> &#x27;<span class="title">Stevenyangecho</span>\<span class="title">UEditor</span>\<span class="title">UEditorServiceProvider</span>&#x27; <span class="title">not</span> <span class="title">found</span></span></span><br></pre></td></tr></table></figure>
<p>提示以上的错误要确定之前的步骤是否正确：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PS E:\wamp\www\blog&gt; php artisan vendor:publish</span><br><span class="line"></span><br><span class="line"> Which provider <span class="keyword">or</span> tag<span class="string">&#x27;s files would you like to publish?:</span></span><br><span class="line"><span class="string">  [0 ] Publish files from all providers and tags listed below</span></span><br><span class="line"><span class="string">.......</span></span><br><span class="line"><span class="string"> &gt; 0//输入0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.......</span></span><br><span class="line"><span class="string">Publishing complete.</span></span><br></pre></td></tr></table></figure>
<p>出现以上信息说明已经配置完成。</p>
<p>一串文件下载配置之后，laravel项目的public目录下会自动建立一个laravel-u-editor的文件夹。这个文件夹里包含的是编辑器本身的JS文件。同时在config文件夹下也会生成一个名为UEditorUpload.php的文件，这个是基础的配置文件。当这些文件都生成之后，说明编辑器已经在项目中集成好了，下一步就可以在视图文件中进行注入了</p>
<p>前端视图中整合ue编辑器：</p>
<p>首先引入JS等文件，因为laravel框架已经帮我们集成好了，直接在视图文件尾部加入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">include</span>(<span class="string">&#x27;UEditor::head&#x27;</span>) 即可</span><br></pre></td></tr></table></figure>
<p>然后加载编辑器的容器，最后实例化编辑器，这部分比较简单，直接贴代码：</p>
<p> 加载编辑器的容器 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;detail_info&quot;</span>&gt;</span><br><span class="line">&lt;script id=<span class="string">&quot;container&quot;</span> name=<span class="string">&quot;content&quot;</span> type=<span class="string">&quot;text/plain&quot;</span> style=<span class="string">&quot;width: 900px;position:absolute;left:300px;top:120px;&quot;</span>&gt;</span><br><span class="line">&#123;!! html_entity_decode(<span class="variable">$article</span>-&gt;content) !!&#125; <span class="comment">//将富文本编辑器内容转义并在页面上显示</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p> 实例化编辑器 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ue = UE.getEditor(<span class="string">&#x27;container&#x27;</span>);</span><br><span class="line">ue.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">ue.execCommand(<span class="string">&#x27;serverparam&#x27;</span>, <span class="string">&#x27;_token&#x27;</span>, <span class="string">&#x27;&#123;&#123; csrf_token() &#125;&#125;&#x27;</span>); <span class="comment">//这里添加laravel安全token：便于数据提交</span></span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><strong>UEditor增加视频上传</strong><br>UEditor安装好了之后并没有很好的支持插入视频，即便插入视频之后还是显示空白。</p>
<p>查阅了网上相关资料后，可以用一下方法实现视频上传：<br>修改ueditor.all.js文件（Laravel项目在public\laravel-u-editor下）</p>
<p>ueditor.all.js，17769行</p>
<p>html.push(creatInsertStr( vi.url, vi.width || 420,  vi.height || 280, id + i, null, cl, ‘image’));修改为</p>
<p>html.push(creatInsertStr( vi.url, vi.width || 420,  vi.height || 280, id + i, null, cl, ‘video’));</p>
<p>7343,7344,7346行，注释掉代码：</p>
<p>var root = UE.htmlparser(html);</p>
<p>me.filterInputRule(root);</p>
<p>html = root.toHtml();</p>
<p>然后清除一下缓存，刷新页面即可添加视频。</p>
<p><img src="https://i.imgur.com/yhHVRiN.png"></p>
<p>视频无法预览，但是仍可改变布局和大小。</p>
<p>看到有些博客写将whitList修改为whiteList，好像并没有什么效果。。</p>
<p><strong>Ueditor图片上传</strong></p>
<p>在laravel中使用ueditor上传图片依旧会出现上传错误的提示，按F12可以看到：</p>
<p><img src="https://i.imgur.com/AREcTBq.png"></p>
<p>说明是一个图片上传的请求地址，原因可能出在上传的图片的保存路径。打开Ueditor扩展包的配置文件<code>config/UEditorUpload.php</code>：</p>
<pre><code>/* 上传图片配置项 */
&#39;upload&#39; =&gt; [
    &quot;imageActionName&quot; =&gt; &quot;uploadimage&quot;, /* 执行上传图片的action名称 */
    &quot;imageFieldName&quot; =&gt; &quot;upfile&quot;, /* 提交的图片表单名称 */
    &quot;imageMaxSize&quot; =&gt; 2048000, /* 上传大小限制，单位B */
    &quot;imageAllowFiles&quot; =&gt; [&quot;.png&quot;, &quot;.jpg&quot;, &quot;.jpeg&quot;, &quot;.gif&quot;, &quot;.bmp&quot;], /* 上传图片格式显示 */
    &quot;imageCompressEnable&quot; =&gt; true, /* 是否压缩图片,默认是true */
    &quot;imageCompressBorder&quot; =&gt; 1600, /* 图片压缩最长边限制 */
    &quot;imageInsertAlign&quot; =&gt; &quot;none&quot;, /* 插入的图片浮动方式 */
    &quot;imageUrlPrefix&quot; =&gt; &quot;&quot;, /* 图片访问路径前缀 */
    &quot;imagePathFormat&quot; =&gt; &quot;/uploads/ueditor/image/&#123;yyyy&#125;&#123;mm&#125;&#123;dd&#125;/&#123;time&#125;&#123;rand:6&#125;&quot;, /* 上传保存路径,可以自定义保存路径和文件名格式 */
</code></pre>
<p>将imagePathFormat改为图片保存的目录。Linux系统需要注意权限问题。修改之后重新选择图片本地上传，还是会出现以下问题：</p>
<p><img src="https://i.imgur.com/hhv7yHL.jpg"></p>
<p>在这个Upload.php中rand 第二个参数太长导致的，然后找到这个文件，路径：<code>vendor\stevenyangecho\laravel-u-editor\src\Uploader</code>下面。然后找到131行，发现：<br><code>$randNum = rand(1, 10000000000) . rand(1, 10000000000);</code>  更改成<br>    $randNum = rand(1, 1000000) . rand(1, 1000000);<br>修改之后上传的问题解决了。Linux系统下还是需要注意文件的路径问题以及权限问题。</p>
<p><strong>Ueditor图片左右浮动</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">,xssFilterRules: <span class="literal">true</span></span><br><span class="line"><span class="comment">//input xss过滤</span></span><br><span class="line">,inputXssFilter: <span class="literal">true</span></span><br><span class="line"><span class="comment">//output xss过滤</span></span><br><span class="line">,outputXssFilter: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>然后设置元素的白名单过滤：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">,whitList: &#123;</span><br><span class="line">...</span><br><span class="line">img: [..., <span class="string">&#x27;style&#x27;</span>],</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使img的style属性忽略。</p>
<p>2.表单验证<br>直接上代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params">Request <span class="variable">$request</span></span>) </span>&#123;</span><br><span class="line">	<span class="variable">$data</span> = <span class="variable">$request</span>-&gt;except(<span class="string">&#x27;_token&#x27;</span>);<span class="comment">//获取除token外的所有表单数据</span></span><br><span class="line">	<span class="keyword">$this</span>-&gt;validate(<span class="variable">$request</span>, [<span class="comment">//验证表单值</span></span><br><span class="line">		<span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;requred&#x27;</span>,<span class="comment">//设置title为必填</span></span><br><span class="line">		<span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;integer&#x27;</span>,<span class="comment">//设置content整数</span></span><br><span class="line"></span><br><span class="line">	], [</span><br><span class="line">		<span class="string">&#x27;required&#x27;</span> =&gt; <span class="string">&#x27;:attribute 为必填项&#x27;</span>,<span class="comment">//自定义提示文字，默认为英文</span></span><br><span class="line">		<span class="string">&#x27;min&#x27;</span> =&gt; <span class="string">&#x27;:attribute 长度不符合要求&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;integer&#x27;</span> =&gt; <span class="string">&#x27;:attribute 必须为整数&#x27;</span>,</span><br><span class="line">	], [</span><br><span class="line">		<span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;标题&#x27;</span>,<span class="comment">//设置表单字段表示的含义</span></span><br><span class="line">		<span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">	]);<span class="comment">//当验证未通过则自动返回表单页面，不会执行以下内容</span></span><br><span class="line">	<span class="variable">$result</span> = DB::table(<span class="string">&#x27;news&#x27;</span>)</span><br><span class="line">		-&gt;insert(<span class="variable">$data</span>);<span class="comment">//数据插入</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$result</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> redirect()-&gt;back()-&gt;with(<span class="string">&#x27;msg&#x27;</span>, <span class="string">&#x27;操作成功&#x27;</span>);<span class="comment">//插入成功，返回添加页</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> redirect()-&gt;back()-&gt;with(<span class="string">&#x27;msg&#x27;</span>, <span class="string">&#x27;操作失败&#x27;</span>)-&gt;withInput();<span class="comment">//插入失败，返回添加页并提示错误，将原表单数据返回</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在页面上显示提示：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">if</span> (count(<span class="variable">$errors</span>) &gt; <span class="number">0</span>)<span class="comment">//$errors 变量在每次请求的所有视图中都可以被使用，你可以很方便的假设 $errors 变量已被定义且进行安全地使用。</span></span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">alert</span> <span class="title">alert</span>-<span class="title">danger</span>&quot;&gt;//验证未通过则返回错误信息</span></span><br><span class="line"><span class="class">    &lt;<span class="title">ul</span>&gt;</span></span><br><span class="line"><span class="class">      @<span class="title">foreach</span> ($<span class="title">errors</span>-&gt;<span class="title">all</span>() <span class="title">as</span> $<span class="title">error</span>)</span></span><br><span class="line"><span class="class">        &lt;<span class="title">li</span>&gt;</span>&#123;&#123; <span class="variable">$error</span> &#125;&#125;&lt;/li&gt;</span><br><span class="line">      @<span class="keyword">endforeach</span></span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">@<span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">&lt;fieldset&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">form</span>-<span class="title">group</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">label</span> <span class="title">class</span>=&quot;<span class="title">col</span>-<span class="title">sm</span>-2 <span class="title">control</span>-<span class="title">label</span>&quot;&gt;资讯标题&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">      </span>&#123;&#123;session(<span class="string">&#x27;success&#x27;</span>)&#125;&#125;<span class="comment">//此处返回表单验证通过后闪存中session的信息</span></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">col</span>-<span class="title">sm</span>-6&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">input</span> <span class="title">value</span>=&quot;</span>&#123;&#123;old(<span class="string">&#x27;title&#x27;</span>)&#125;&#125;<span class="string">&quot; class=&quot;</span>form-control<span class="string">&quot; id=&quot;</span>title<span class="string">&quot; type=&quot;</span>text<span class="string">&quot; name=&quot;</span>title<span class="string">&quot;  style=&quot;</span>width:<span class="number">40</span>%;<span class="string">&quot;/&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br></pre></td></tr></table></figure>
<p>3.数据筛选和分页</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Request <span class="variable">$request</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$request</span>-&gt;input(<span class="string">&#x27;category_id&#x27;</span>)) &#123;<span class="comment">//判断是否带有分类id</span></span><br><span class="line">		<span class="variable">$category_id</span> = <span class="variable">$request</span>-&gt;input(<span class="string">&#x27;category_id&#x27;</span>);<span class="comment">//获取分类id</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="variable">$category_id</span> == <span class="string">&#x27;all&#x27;</span>) &#123;<span class="comment">//判断是否是所有分类</span></span><br><span class="line">			<span class="variable">$news</span> = DB::table(<span class="string">&#x27;news&#x27;</span>)</span><br><span class="line">				-&gt;select(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;category_id&#x27;</span>, <span class="string">&#x27;addtime&#x27;</span>)</span><br><span class="line">				-&gt;orderBy(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;desc&quot;</span>)</span><br><span class="line">				-&gt;paginate(<span class="number">10</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;<span class="comment">//否则执行where查询单个分类</span></span><br><span class="line">			<span class="variable">$news</span> = DB::table(<span class="string">&#x27;news&#x27;</span>)</span><br><span class="line">				-&gt;select(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;category_id&#x27;</span>, <span class="string">&#x27;addtime&#x27;</span>)</span><br><span class="line">				-&gt;where(<span class="string">&#x27;category_id&#x27;</span>, <span class="variable">$category_id</span>)</span><br><span class="line">				-&gt;orderBy(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;desc&quot;</span>)</span><br><span class="line">				-&gt;paginate(<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;<span class="comment">//不带分类id则默认加上，方便在分页里调用</span></span><br><span class="line">		<span class="variable">$news</span> = DB::table(<span class="string">&#x27;news&#x27;</span>)</span><br><span class="line">			-&gt;select(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;category_id&#x27;</span>, <span class="string">&#x27;addtime&#x27;</span>)</span><br><span class="line">			-&gt;orderBy(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;desc&quot;</span>)</span><br><span class="line">			-&gt;paginate(<span class="number">10</span>);</span><br><span class="line">		<span class="variable">$category_id</span> = <span class="string">&#x27;all&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="variable">$category</span> = DB::table(<span class="string">&#x27;category&#x27;</span>)</span><br><span class="line">		-&gt;get();</span><br><span class="line">	<span class="variable">$assign</span> = <span class="keyword">array</span>(</span><br><span class="line">		<span class="string">&#x27;news&#x27;</span> =&gt; <span class="variable">$news</span>,</span><br><span class="line">		<span class="string">&#x27;category&#x27;</span> =&gt; <span class="variable">$category</span>,</span><br><span class="line">		<span class="string">&#x27;category_id&#x27;</span> =&gt; <span class="variable">$category_id</span>,<span class="comment">//用于记住分类id</span></span><br><span class="line">	);</span><br><span class="line">	<span class="keyword">return</span> view(<span class="string">&#x27;admin.news.index&#x27;</span>, <span class="variable">$assign</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重点在于：</p>
<p>默认的分页展示写法是这样的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;!! <span class="variable">$news</span>-&gt;links() !!&#125;</span><br></pre></td></tr></table></figure>
<p>那么当分页筛选成功后，点击下一页则无法按照条件筛选，因为category_id没有存入到分页的url。我们需要将分类id加入到分页url中才能记住用户选择的分类id：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;!! <span class="variable">$news</span>-&gt;appends(<span class="keyword">array</span>(<span class="string">&#x27;category_id&#x27;</span>=&gt;<span class="variable">$category_id</span>))-&gt;links() !!&#125;</span><br></pre></td></tr></table></figure>
<p>那么生成的分页url是这样的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//www.blog.com/admin/news/index?category_id=1&amp;page=2</span></span><br></pre></td></tr></table></figure>
<p>就能记住用户选择的分类id进行where条件筛选。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>UEditor</tag>
        <tag>表单验证</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel使用（ajax,模板继承,登陆验证,中间件）</title>
    <url>/2018/03/23/Laravel-ajax-temp-check-middleware/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1.ajax<br>使用ajax传递数据必须带上_token字段:</p>
<span id="more"></span>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">type:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">url:<span class="string">&quot;&#123;&#123; url(&#x27;admin/login/login&#x27;)&#125;&#125; &quot;</span>,</span><br><span class="line">data:&#123;username:username,password:password,_token:<span class="string">&#x27;&lt;?php echo csrf_token() ?&gt;&#x27;</span>&#125;,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(data==<span class="string">&#x27;no&#x27;</span>)&#123;</span><br><span class="line">$(<span class="string">&#x27;#success&#x27;</span>).text(<span class="string">&#x27;用户名或密码错误&#x27;</span>).css(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">window.location.href=<span class="string">&quot;&#123;&#123; url(&#x27;admin/login/login&#x27;)&#125;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>后台返回ajax数据：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">Request <span class="variable">$request</span></span>) </span>&#123;</span><br><span class="line">	<span class="variable">$data</span> = <span class="variable">$request</span>-&gt;all();</span><br><span class="line">	<span class="keyword">return</span> response()-&gt;json(<span class="string">&#x27;no&#x27;</span>); <span class="comment">//ajax返回数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.保存未提交成功的数据</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录验证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">Request <span class="variable">$request</span></span>) </span>&#123;</span><br><span class="line">	<span class="variable">$data</span> = <span class="variable">$request</span>-&gt;only(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span> (Auth::attempt(<span class="variable">$data</span>)) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> redirect(<span class="string">&#x27;admin/login/index&#x27;</span>)-&gt;withInput(<span class="variable">$request</span>-&gt;except(<span class="string">&#x27;password&#x27;</span>))-&gt;with(<span class="string">&#x27;msg&#x27;</span>, <span class="string">&#x27;用户名或密码错误&#x27;</span>);</span><br><span class="line">   <span class="comment">//返回登陆页并返回除密码外的所有表单数据，添加一次性session错误提示</span></span><br><span class="line">   	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在视图页用old获取之前的数据<br> <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;&#123;&#123; old(&#x27;username&#x27;) &#125;&#125;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"> &#123;&#123; session(<span class="string">&#x27;msg&#x27;</span>) &#125;&#125; <span class="comment">//视图层获取错误信息</span></span><br></pre></td></tr></table></figure><br>3.模板继承<br>比头尾分离更加人性化</p>
<p>制定头尾模板home.blade.php放入resouces/views/layouts/目录下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;meta name=<span class="string">&quot;viewport&quot;</span></span><br><span class="line">  content=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;ie=edge&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;@<span class="keyword">yield</span>(<span class="string">&#x27;title&#x27;</span>) - BeEasy博客&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">yield</span>(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>其中变量用@yield()替代</p>
<p>视图层模板继承：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">extends</span>(<span class="string">&#x27;layouts.home&#x27;</span>)</span><br><span class="line"></span><br><span class="line">@section(<span class="string">&#x27;title&#x27;</span>, <span class="variable">$title</span>);</span><br><span class="line"></span><br><span class="line">@section(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">&lt;form action=<span class="string">&quot;&#123;&#123; url(&#x27;view/store&#x27;) &#125;&#125;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">&#123;&#123; csrf_field() &#125;&#125;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;title&quot;</span> value=<span class="string">&quot;&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;content&quot;</span> value=<span class="string">&quot;&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">&lt;button type=<span class="string">&quot;submit&quot;</span>&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure>
<p>其中块级元素必须有闭合标签</p>
<p>4.中间件<br>比如后台管理员登陆后登陆超时将返回登陆</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php artisan make:middleware AdminMiddleware</span><br></pre></td></tr></table></figure>
<p>使用Artisan命令快速创建中间件</p>
<p>这个命令会在 app/Http/Middleware 目录下创建一个新的中间件类 Admin来检测用户是否登录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Auth</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminMiddleware</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Handle an incoming request.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span>  \Illuminate\Http\Request  $request</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span>  \Closure  $next</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$request</span>, <span class="built_in">Closure</span> <span class="variable">$next</span></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (Auth::guard(<span class="string">&#x27;admin&#x27;</span>)-&gt;check()) &#123;<span class="comment">//检测用户是否登录</span></span><br><span class="line">			<span class="keyword">return</span> <span class="variable">$next</span>(<span class="variable">$request</span>);<span class="comment">//执行登陆后的操作。可自行定制</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> redirect(<span class="string">&#x27;admin/login/index&#x27;</span>);<span class="comment">//未登录则返回登陆页</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>中间件创建成功后我们需要注册中间件，不然使用起来会特别不方便：</p>
<p>在 app/Http/Kernel.php 文件中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="variable">$routeMiddleware</span> = [</span><br><span class="line">	<span class="string">&#x27;auth&#x27;</span> =&gt; \Illuminate\Auth\Middleware\Authenticate::class,</span><br><span class="line">	<span class="string">&#x27;auth.basic&#x27;</span> =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,</span><br><span class="line">	<span class="string">&#x27;bindings&#x27;</span> =&gt; \Illuminate\Routing\Middleware\SubstituteBindings::class,</span><br><span class="line">	<span class="string">&#x27;can&#x27;</span> =&gt; \Illuminate\Auth\Middleware\Authorize::class,</span><br><span class="line">	<span class="string">&#x27;guest&#x27;</span> =&gt; \App\Http\Middleware\RedirectIfAuthenticated::class,</span><br><span class="line">	<span class="string">&#x27;throttle&#x27;</span> =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,</span><br><span class="line">	<span class="string">&#x27;logincheck&#x27;</span> =&gt; \App\Http\Middleware\logincheckMiddleware::class,</span><br><span class="line">	<span class="string">&#x27;admincheck&#x27;</span> =&gt; \App\Http\Middleware\AdminMiddleware::class,<span class="comment">//给中间件设置别名，方面调用</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>如果你想要中间件在每一个 HTTP 请求期间被执行，只需要将相应的中间件类设置到 app/Http/Kernel.php 的数组属性 $middleware 中即可。</p>
<p>有时候你可能想要通过指定一个键名的方式将相关中间件分到同一个组里面，从而更方便将其分配到路由中，这可以通过使用 HTTP Kernel 的 $middlewareGroups 属性实现。</p>
<p>那么当你将后台登陆页面和登陆成功首页写好后，如何只在登陆成功页加入中间件检测登陆，而不在登陆页加上中间件？</p>
<p>打开全局路由文件 routes/web.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//admin模块</span></span><br><span class="line">Route::prefix(<span class="string">&#x27;admin&#x27;</span>)-&gt;namespace(<span class="string">&#x27;admin&#x27;</span>)-&gt;group(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	Route::prefix(<span class="string">&#x27;login&#x27;</span>)-&gt;group(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		Route::get(<span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;LoginController@index&#x27;</span>);</span><br><span class="line">		Route::post(<span class="string">&#x27;login&#x27;</span>, <span class="string">&#x27;LoginController@login&#x27;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	Route::group([<span class="string">&#x27;middleware&#x27;</span> =&gt; [<span class="string">&#x27;admincheck&#x27;</span>]], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//路由中间件，检测用户是否登录</span></span><br><span class="line">		Route::prefix(<span class="string">&#x27;index&#x27;</span>)-&gt;group(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">			Route::get(<span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;IndexController@index&#x27;</span>);</span><br><span class="line">			Route::post(<span class="string">&#x27;loginout&#x27;</span>, <span class="string">&#x27;IndexController@loginout&#x27;</span>);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>那么其他需要登陆的页面方法，将路由规则写在注释下面就可以了。</p>
<p>5.登陆账号密码验证<br>虽然laravel给我们提供了一套简单的用户注册登录流程，但是并不能完全满足我们的需求，比如我们管理员是在admin表，验证的是username和password。</p>
<p>首先需要在 /config/auth.php文件中添加：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;guards&#x27;</span> =&gt; [</span><br><span class="line">	<span class="string">&#x27;web&#x27;</span> =&gt; [</span><br><span class="line">		<span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;session&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;provider&#x27;</span> =&gt; <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">	],</span><br><span class="line">    </span><br><span class="line">	<span class="string">&#x27;api&#x27;</span> =&gt; [</span><br><span class="line">		<span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;token&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;provider&#x27;</span> =&gt; <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">	],</span><br><span class="line">	<span class="string">&#x27;admin&#x27;</span> =&gt; [<span class="comment">//定义后台的驱动和提供</span></span><br><span class="line">		<span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;session&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;provider&#x27;</span> =&gt; <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    </span><br><span class="line">	],</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>添加配置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;providers&#x27;</span> =&gt; [</span><br><span class="line">	<span class="string">&#x27;users&#x27;</span> =&gt; [</span><br><span class="line">		<span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;eloquent&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;model&#x27;</span> =&gt; App\User::class,</span><br><span class="line">	],</span><br><span class="line">    </span><br><span class="line">	<span class="string">&#x27;admin&#x27;</span> =&gt; [ <span class="comment">//后台驱动以及模型 database驱动对应的是table表单</span></span><br><span class="line">		<span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;eloquent&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;model&#x27;</span> =&gt; App\Models\AdminUser::class,</span><br><span class="line">	],</span><br><span class="line">	<span class="comment">// &#x27;users&#x27; =&gt; [</span></span><br><span class="line">	<span class="comment">// &#x27;driver&#x27; =&gt; &#x27;database&#x27;,</span></span><br><span class="line">	<span class="comment">// &#x27;table&#x27; =&gt; &#x27;users&#x27;,</span></span><br><span class="line">	<span class="comment">// ],</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>然后我们可以通过复制App目录下User.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">Authenticatable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Notifications</span>\<span class="title">Notifiable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminUser</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">use</span> <span class="title">Notifiable</span>;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 关联到模型的数据库</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="variable">$table</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The attributes that are mass assignable.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="variable">$fillable</span> = [<span class="comment">//验证的字段</span></span><br><span class="line">		<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">	];</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The attributes that should be hidden for arrays.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="variable">$hidden</span> = [</span><br><span class="line">		<span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;remember_token&#x27;</span>,</span><br><span class="line">	];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在控制器里调用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">Request <span class="variable">$request</span></span>) </span>&#123;</span><br><span class="line">	<span class="variable">$data</span> = <span class="variable">$request</span>-&gt;only(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span> (Auth::guard(<span class="string">&#x27;admin&#x27;</span>)-&gt;attempt(<span class="variable">$data</span>, <span class="variable">$remember</span>)) &#123;</span><br><span class="line">		<span class="keyword">return</span> redirect(<span class="string">&#x27;admin/index/index&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> redirect(<span class="string">&#x27;admin/login/index&#x27;</span>)-&gt;withInput(<span class="variable">$request</span>-&gt;except(<span class="string">&#x27;password&#x27;</span>))-&gt;with(<span class="string">&#x27;msg&#x27;</span>, <span class="string">&#x27;用户名或密码错误&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然，如果你的网站只有后台管理员不涉及到前台用户，那么在auth.php里可修改默认配置：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;defaults&#x27;</span> =&gt; [</span><br><span class="line">	<span class="string">&#x27;guard&#x27;</span> =&gt; <span class="string">&#x27;admin&#x27;</span>,<span class="comment">//将默认改为admin</span></span><br><span class="line">	<span class="string">&#x27;passwords&#x27;</span> =&gt; <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>这样在调用的时候不用指定guard：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Auth::attempt(<span class="variable">$data</span>, <span class="variable">$remember</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>ajax</tag>
        <tag>模板继承</tag>
        <tag>登陆验证</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel使用（七牛云存储图片）</title>
    <url>/2018/05/26/Laravel-cloudfile/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>laravel5结合七牛云存储图片</strong></p>
<p>首先去官网注册账号以及完成实名认证<a href="https://www.qiniu.com/">https://www.qiniu.com/</a></p>
<span id="more"></span>
<p>1.新建对象存储</p>
<p><img src="https://i.imgur.com/KIE1F52.png"></p>
<p>2.查询我们所需要的数据</p>
<p><img src="https://i.imgur.com/KN0egkT.png"></p>
<p>3.借助第三方集成扩展处理上传</p>
<p><img src="https://i.imgur.com/F4Mj0VA.png"></p>
<p>4.然后就是修改普通的上传代码</p>
<p>存储图片：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Storage::disk(<span class="string">&#x27;qiniu&#x27;</span>)-&gt;put(<span class="variable">$newFileName</span>, File::get(<span class="variable">$request</span>-&gt;file(<span class="string">&#x27;file&#x27;</span>)-&gt;path()));</span><br></pre></td></tr></table></figure>
<p>获取图片地址：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;path&#x27;</span> =&gt; Storage::disk(<span class="string">&#x27;qiniu&#x27;</span>)-&gt;getDriver()-&gt;downloadUrl(<span class="variable">$newFileName</span>)</span><br></pre></td></tr></table></figure>
<p>当然，也可以先把图片保存在本地再上传：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$request</span>-&gt;hasFile(<span class="string">&#x27;image&#x27;</span>)) &#123;</span><br><span class="line">	<span class="variable">$file</span> = <span class="variable">$data</span>[<span class="string">&#x27;image&#x27;</span>];</span><br><span class="line">	<span class="comment">//判断文件是否上传成功</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$file</span>-&gt;isValid()) &#123;</span><br><span class="line">		<span class="comment">//原文件名</span></span><br><span class="line">		<span class="variable">$originalName</span> = <span class="variable">$file</span>-&gt;getClientOriginalName();</span><br><span class="line">		<span class="comment">//扩展名</span></span><br><span class="line">		<span class="variable">$ext</span> = <span class="variable">$file</span>-&gt;getClientOriginalExtension();</span><br><span class="line">		<span class="comment">//MimeType</span></span><br><span class="line">		<span class="variable">$type</span> = <span class="variable">$file</span>-&gt;getClientMimeType();</span><br><span class="line">		<span class="comment">//临时绝对路径</span></span><br><span class="line">		<span class="variable">$realPath</span> = <span class="variable">$file</span>-&gt;getRealPath();</span><br><span class="line"></span><br><span class="line">		<span class="variable">$Images</span> = substr(<span class="variable">$realPath</span>, <span class="number">0</span>, -<span class="number">4</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$ext</span>; <span class="comment">//设置裁剪图片保存的名称</span></span><br><span class="line"></span><br><span class="line">		<span class="variable">$filename</span> = uniqid() . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$ext</span>;</span><br><span class="line"></span><br><span class="line">		Image::make(<span class="variable">$realPath</span>)-&gt;resize(<span class="number">1920</span>, <span class="number">260</span>)-&gt;save(<span class="variable">$Images</span>); <span class="comment">//图片裁剪</span></span><br><span class="line"></span><br><span class="line">		<span class="variable">$bool</span> = Storage::disk(<span class="string">&#x27;public&#x27;</span>)-&gt;put(<span class="variable">$filename</span>, file_get_contents(<span class="variable">$Images</span>));</span><br><span class="line"> 				Storage::disk(<span class="string">&#x27;qiniu&#x27;</span>)-&gt;put(<span class="variable">$filename</span>, <span class="variable">$realPath</span>);</span><br><span class="line">		<span class="comment">//判断是否上传成功</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="variable">$bool</span>) &#123;</span><br><span class="line">			<span class="variable">$data</span>[<span class="string">&#x27;image&#x27;</span>] = Storage::disk(<span class="string">&#x27;public&#x27;</span>)-&gt;url(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>图片云存储</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel使用（图片上传,裁剪）</title>
    <url>/2018/03/23/Laravel-imgupload/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1.图片上传</p>
<span id="more"></span>
<p>直接上代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">DB</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Storage</span>;<span class="comment">//使用到的类</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">Request <span class="variable">$request</span>, <span class="variable">$id</span></span>) </span>&#123;<span class="comment">//</span></span><br><span class="line">		<span class="variable">$data</span> = <span class="variable">$request</span>-&gt;except(<span class="string">&#x27;_token&#x27;</span>);<span class="comment">//获取表单中除token外的所有数值</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!<span class="variable">$request</span>-&gt;hasFile(<span class="string">&#x27;image&#x27;</span>)) &#123;<span class="comment">//判断是否有图片上传</span></span><br><span class="line">			DB::table(<span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">				-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$id</span>)</span><br><span class="line">				-&gt;update(<span class="variable">$data</span>);</span><br><span class="line">			<span class="keyword">return</span> redirect(<span class="string">&#x27;admin/carousel/index&#x27;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="variable">$file</span> = <span class="variable">$data</span>[<span class="string">&#x27;image&#x27;</span>];<span class="comment">//获取图片信息</span></span><br><span class="line">			<span class="keyword">$this</span>-&gt;validate(<span class="variable">$request</span>, [<span class="comment">//图片验证</span></span><br><span class="line">				<span class="string">&#x27;logo_img&#x27;</span> =&gt; <span class="string">&#x27;image|between:0,5242880&#x27;</span>,<span class="comment">//是否为图片类型，以及大小在0~5M之间</span></span><br><span class="line"></span><br><span class="line">			], [</span><br><span class="line">				<span class="string">&#x27;image&#x27;</span> =&gt; <span class="string">&#x27;:attribute 必须为图片&#x27;</span>,</span><br><span class="line">				<span class="string">&#x27;size&#x27;</span> =&gt; <span class="string">&#x27;:attribute 文件大小必须小于5M&#x27;</span>,</span><br><span class="line">			], [</span><br><span class="line">				<span class="string">&#x27;image&#x27;</span> =&gt; <span class="string">&#x27;图片&#x27;</span>,</span><br><span class="line">			]);</span><br><span class="line">			<span class="comment">//判断文件是否上传成功</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="variable">$file</span>-&gt;isValid()) &#123;</span><br><span class="line">				<span class="comment">//原文件名</span></span><br><span class="line">				<span class="variable">$originalName</span> = <span class="variable">$file</span>-&gt;getClientOriginalName();</span><br><span class="line">				<span class="comment">//扩展名</span></span><br><span class="line">				<span class="variable">$ext</span> = <span class="variable">$file</span>-&gt;getClientOriginalExtension();</span><br><span class="line">				<span class="comment">//MimeType</span></span><br><span class="line">				<span class="variable">$type</span> = <span class="variable">$file</span>-&gt;getClientMimeType();</span><br><span class="line">				<span class="comment">//临时绝对路径</span></span><br><span class="line">				<span class="variable">$realPath</span> = <span class="variable">$file</span>-&gt;getRealPath();</span><br><span class="line">				<span class="variable">$filename</span> = uniqid() . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$ext</span>;</span><br><span class="line">				<span class="variable">$bool</span> = Storage::disk(<span class="string">&#x27;public&#x27;</span>)-&gt;put(<span class="variable">$filename</span>, file_get_contents(<span class="variable">$realPath</span>));<span class="comment">//这里使用的是基于PHP的flysystem强大的文件系统抽象</span></span><br><span class="line">				<span class="comment">//判断是否上传成功</span></span><br><span class="line">				<span class="keyword">if</span> (<span class="variable">$bool</span>) &#123;</span><br><span class="line">					<span class="variable">$data</span>[<span class="string">&#x27;image&#x27;</span>] = Storage::disk(<span class="string">&#x27;public&#x27;</span>)-&gt;url(<span class="variable">$filename</span>);<span class="comment">//获取软连接地址</span></span><br><span class="line">					DB::table(<span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">						-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$id</span>)</span><br><span class="line">						-&gt;update(<span class="variable">$data</span>);</span><br><span class="line">					<span class="keyword">return</span> redirect(<span class="string">&#x27;admin/carousel/index&#x27;</span>);<span class="comment">//存储到数据库</span></span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> redirect()-&gt;back()-&gt;with(<span class="string">&#x27;msg&#x27;</span>, <span class="string">&#x27;请稍后再试&#x27;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>我们上传文件的地址其实是在 config/filesystems.php配置文件中的disk数组下public中的root地址</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;disks&#x27;</span> =&gt; [</span><br><span class="line"></span><br><span class="line">	<span class="string">&#x27;local&#x27;</span> =&gt; [</span><br><span class="line">		<span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;local&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;root&#x27;</span> =&gt; storage_path(<span class="string">&#x27;app&#x27;</span>),</span><br><span class="line">	],</span><br><span class="line"></span><br><span class="line">	<span class="string">&#x27;public&#x27;</span> =&gt; [</span><br><span class="line">		<span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;local&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;root&#x27;</span> =&gt; storage_path(<span class="string">&#x27;app/public&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;url&#x27;</span> =&gt; env(<span class="string">&#x27;APP_URL&#x27;</span>) . <span class="string">&#x27;/storage&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;visibility&#x27;</span> =&gt; <span class="string">&#x27;public&#x27;</span>,</span><br><span class="line">	],</span><br><span class="line"></span><br><span class="line">	<span class="string">&#x27;s3&#x27;</span> =&gt; [</span><br><span class="line">		<span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;s3&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;key&#x27;</span> =&gt; env(<span class="string">&#x27;AWS_ACCESS_KEY_ID&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;secret&#x27;</span> =&gt; env(<span class="string">&#x27;AWS_SECRET_ACCESS_KEY&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;region&#x27;</span> =&gt; env(<span class="string">&#x27;AWS_DEFAULT_REGION&#x27;</span>),</span><br><span class="line">		<span class="string">&#x27;bucket&#x27;</span> =&gt; env(<span class="string">&#x27;AWS_BUCKET&#x27;</span>),</span><br><span class="line">	],</span><br><span class="line"></span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>因为我们指定的disks是public，所以上传的文件将存储在/storage/app/public目录下。</p>
<p>当以上操作成功将文件上传，我们使用Storage::disk(‘public’)-&gt;url($filename)  获取到的结果是这样的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/storage/<span class="number">5</span>aaa3fe021b6f.png</span><br></pre></td></tr></table></figure>
<p>虽然路径看起来一目了然，但是直接拿到页面上去用并不能获取到图片。</p>
<p>那么我们需要创建一个软连接来将上面的链接指向到storage_path(‘app/public’)</p>
<p>即  /storage/app/public目录下</p>
<p>要创建这个软链接，直接使用Artisan命令：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php artisan storage:link</span><br></pre></td></tr></table></figure>
<p>文件被存储并且软链已经被创建的情况下，就可以使用辅助函数 asset 创建一个指向该文件的URL：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;img  src=<span class="string">&quot;&#123;&#123; asset(‘/storage/5aaa3fe021b6f.png’) &#125;&#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>这种方式可以将公开访问的文件保存在一个可以很容易被不同部署环境共享的目录，在使用零停机时间部署系统如Envoyer的时候尤其方便。</p>
<p>关于flysystem其他的一些文件操作，可参考<a href="http://laravelacademy.org/post/6071.html" title="这里">http://laravelacademy.org/post/6071.html</a></p>
<p><strong>附加：图片裁剪</strong><br>使用图片裁剪可以用强大的Intervention Image扩展，需要确保PHP版本&gt;=5.4并且安装了Fileinfo扩展，以及GD库（&gt;=2.0）或者Imagick扩展（&gt;=6.5.7）。</p>
<p>使用Composer命令安装最新版本的Intervention Image</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">composer <span class="keyword">require</span> intervention/image</span><br></pre></td></tr></table></figure>
<p>安装完毕之后注册服务提供者，在config/app.php文件，$providers数组下加入：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Intervention\Image\ImageServiceProvider::class</span><br></pre></td></tr></table></figure>
<p>然后添加如下门面到$aliaes数组：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;Image&#x27;</span> =&gt; Intervention\Image\Facades\Image::class</span><br></pre></td></tr></table></figure>
<p>配置方面，默认情况下，Intervention Image使用PHP的GD库扩展处理所有图片，如果你想要切换到Imagick，你可以将配置文件拉到应用中：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php artisan vendor:publish --provider=<span class="string">&quot;Intervention\Image\ImageServiceProviderLaravel5&quot;</span></span><br></pre></td></tr></table></figure>
<p>这样对应的配置文件会被拷贝到 config/image.php ，这样你可以在该配置文件中修改图片处理驱动配置。</p>
<p>在控制器中使用图片裁剪</p>
<p>首先需要在控制器：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Image</span>；</span><br></pre></td></tr></table></figure>
<p>然后将带上文件路径的图片进行操作：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (<span class="variable">$file</span>-&gt;isValid()) &#123;</span><br><span class="line">			<span class="comment">//原文件名</span></span><br><span class="line">			<span class="variable">$originalName</span> = <span class="variable">$file</span>-&gt;getClientOriginalName();</span><br><span class="line">			<span class="comment">//扩展名</span></span><br><span class="line">			<span class="variable">$ext</span> = <span class="variable">$file</span>-&gt;getClientOriginalExtension();</span><br><span class="line">			<span class="comment">//MimeType</span></span><br><span class="line">			<span class="variable">$type</span> = <span class="variable">$file</span>-&gt;getClientMimeType();</span><br><span class="line">			<span class="comment">//临时绝对路径</span></span><br><span class="line">			<span class="variable">$realPath</span> = <span class="variable">$file</span>-&gt;getRealPath();</span><br><span class="line"></span><br><span class="line">			<span class="variable">$Images</span> = substr(<span class="variable">$realPath</span>, <span class="number">0</span>, -<span class="number">4</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$ext</span>; <span class="comment">//设置裁剪图片保存的名称</span></span><br><span class="line"></span><br><span class="line">			<span class="variable">$filename</span> = uniqid() . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$ext</span>;</span><br><span class="line"></span><br><span class="line">			Image::make(<span class="variable">$realPath</span>)-&gt;resize(<span class="number">1920</span>, <span class="number">530</span>)-&gt;save(<span class="variable">$Images</span>); <span class="comment">//图片裁剪</span></span><br><span class="line"></span><br><span class="line">			<span class="variable">$bool</span> = Storage::disk(<span class="string">&#x27;public&#x27;</span>)-&gt;put(<span class="variable">$filename</span>, file_get_contents(<span class="variable">$Images</span>));</span><br><span class="line">			</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码只是在文件上传功能中添加了一小部分，其中添加变量$Images用来保存裁剪后的图片名称，因为临时的绝对路径中图片的后缀是.tmp，在调用Image类的时候save方法保存的文件后缀不能用图片类型以外的后缀，故只能自行添加。resize方法用于重新设定图片大小，连接save方法将裁剪的图片进行保存。</p>
<p>更多使用方法请参考 Intervention Image 官方文档：<a href="http://image.intervention.io/">http://image.intervention.io/</a></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>上传</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel使用（检测移动端并加载视图）</title>
    <url>/2018/06/13/Laravel-mobile/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>1.有的网站无法用响应式来完成移动端的浏览效果，就要写一套移动端的代码来代替原有视图模板</strong><br>首先需要添加支持设备识别的Laravel扩展，这里以Jenssegers为例：</p>
<span id="more"></span>
<p>添加扩展：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">composer <span class="keyword">require</span> jenssegers/agent</span><br></pre></td></tr></table></figure>
<p>方案一：直接通过修改配置文件中的<code>config/views.php</code>文件，达到修改view函数的默认视图路径。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Jenssegers</span>\<span class="title">Agent</span>\<span class="title">Agent</span> <span class="title">as</span> <span class="title">Agent</span>;</span><br><span class="line"><span class="variable">$Agent</span> = <span class="keyword">new</span> Agent();</span><br><span class="line"><span class="comment">// 判断是否是移动端</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$Agent</span>-&gt;isMobile()) &#123;</span><br><span class="line"><span class="comment">// 是移动端则指向mobile目录</span></span><br><span class="line"><span class="variable">$viewPath</span> = <span class="string">&#x27;mobile&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 否则指向默认目录</span></span><br><span class="line"><span class="variable">$viewPath</span> = <span class="string">&#x27;views&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line"><span class="string">&#x27;paths&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="variable">$viewPath</span>),</span><br></pre></td></tr></table></figure>
<p>同时在resources目录下新建mobile文件夹并保持与views文件夹下相同目录结构。</p>
<p>这样做的好处就是无须修改控制层任何代码，所有在PC端的数据都能完整的应用到移动端，操作便捷。但是如果说移动端渲染的数据与PC端不一致，则可能需要在控制层进行逻辑调整。</p>
<p>方案二：注册一个服务提供者用于判断是否是移动端，然后在模板中判断是否为移动端来显示不同的样式</p>
<p>创建用于判断是否是移动端的服务提供者：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php artisan make:provider AgentServiceProvider</span><br></pre></td></tr></table></figure>
<p>在<code>config/app.php</code>中注册服务</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;providers&#x27;</span> =&gt; [</span><br><span class="line">App\Providers\AgentServiceProvider::class,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>在<code>app/Providers/AgentServiceProvider.php</code>中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">View</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Jenssegers</span>\<span class="title">Agent</span>\<span class="title">Agent</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AgentServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$agent</span> = <span class="keyword">new</span> Agent();<span class="comment">//Agent对象用于判断移动设备</span></span><br><span class="line"></span><br><span class="line">View::share(<span class="string">&#x27;agent&#x27;</span>, <span class="variable">$agent</span>);<span class="comment">//用于在所有视图层通过对象判断设备</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在视图层可直接调用对象的方法来判断设备：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">if</span> (<span class="variable">$agent</span>-&gt;isMobile())</span><br><span class="line"></span><br><span class="line">显示移动设备的内容</span><br><span class="line"></span><br><span class="line">@<span class="keyword">endif</span></span><br></pre></td></tr></table></figure>
<p>这种方案的好处就是可以将移动端模板与PC端都放在一个模板里面，避免重写第二套模板，同时可以根据需求来判断哪些页面需要判断移动端哪些不需要，灵活性比较强。</p>
<p>方案三：在控制器return视图的时候调用扩展判断设备来显示不同的模板。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">use</span> <span class="title">View</span>;</span><br><span class="line">   <span class="keyword">use</span> <span class="title">Jenssegers</span>\<span class="title">Agent</span>\<span class="title">Agent</span>;</span><br><span class="line">   ...</span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="variable">$agent</span> = <span class="keyword">new</span> Agent();</span><br><span class="line">    <span class="keyword">return</span> View::make( (<span class="variable">$agent</span>-&gt;isMobile() ? <span class="string">&#x27;mobile&#x27;</span> : <span class="string">&#x27;desktop&#x27;</span>) . <span class="string">&#x27;.your-view-name&#x27;</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么视图层结构应该是这个样子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">├── views</span><br><span class="line">|   ├── mobile</span><br><span class="line">|   |   ├── main.blade.php</span><br><span class="line">|   └── desktop</span><br><span class="line">|   ├── main.blade.php</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>views</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel使用（关联数据预加载）</title>
    <url>/2022/04/22/Laravel-prestrain/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>1.预加载</strong><br>应用场景：在一个商品表里面的商品分类字段category_id,要在商品分类列表里面直接获取到分类的名字，那么必须要从商品分类表product_category里通过category_id来获取category_name。</p>
<span id="more"></span>
<p>首先获取商品表数据：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="variable">$product</span> = Product::with(<span class="string">&#x27;category&#x27;</span>)-&gt;paginate(<span class="number">15</span>);</span><br><span class="line">	<span class="variable">$assign</span> = compact(<span class="string">&#x27;product&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> view(<span class="string">&#x27;admin.product.index&#x27;</span>, <span class="variable">$assign</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中with里面就是预加载的分类表，在这之前需要在商品的模型中添加对应的关系：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关联分类  Models/Product.php</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">category</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasOne(Product_category::class, <span class="string">&#x27;category_id&#x27;</span>, <span class="string">&#x27;category_id&#x27;</span>)-&gt;withDefault(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$category</span></span>) </span>&#123;</span><br><span class="line">		<span class="variable">$category</span>-&gt;category_name = <span class="string">&#x27;未分类&#x27;</span>;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中hasOne表示一对一，即一个商品对应一个分类，通过分类id在父级中找到对应的分类名。<br>相关的还有一对多（hasMany），多对多（belongsToMany）等。<br>hasOne第一个参数表示相关联的模型，第二个参数默认通过检查关系方法(category)的名称并使用 _id 作为后缀名来确定默认外键名称的，即<code>category_id</code>。第三个参数是父级模型没有使用 id 作为主键，或者是希望用不同的字段来连接子级模型，则可以通过给 hasOne 方法传递第三个参数的形式指定父级数据表的自定义键。因为我在分类表指定的是category_id作为主键，所以需要配置第三个参数。</p>
<p>添加withDefault方法是当在父级没有找到查询到结果返回空的模型。使用闭包函数来定义一个未查询到的分类名称。</p>
<p>关于模型关联的一些其他操作，可参考<a href="https://www.kancloud.cn/iwzh/laravel_doc_zh-5-5/400324#querying-relationship-absence">https://www.kancloud.cn/iwzh/laravel_doc_zh-5-5/400324#querying-relationship-absence</a></p>
<p><strong>2.增加表单请求次数限制</strong></p>
<p>比如一个用户一天只能登陆10次</p>
<p>可以使用访问频率限制的中间件来实现，该中间件已经内置到了框架中：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::post(<span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;UserController@update&#x27;</span>)-&gt;middleware(<span class="string">&#x27;throttle:1,1440&#x27;</span>);;</span><br></pre></td></tr></table></figure>
<p>以上路由表示用户请求更新数据为1440分钟只能更新1次，即一天更新一次，否则将在浏览器显示429的错误码，即访问次数频繁。同时可以自定义错误页面来修改默认的错误提示信息。</p>
<p><strong>3.错误页面获取缓存数据</strong></p>
<p>因为错误页面没有经过数据渲染，所以在App/Providers里服务提供者分配的通用缓存数据无法通过变量获取，但仍然可以通过视图层使用Cache门面来获取缓存数据：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">foreach</span>(Cache::get(<span class="string">&#x27;carousel&#x27;</span>) <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)</span><br><span class="line"></span><br><span class="line">&lt;li data-target=<span class="string">&quot;#carousel&quot;</span> @<span class="keyword">if</span>(<span class="variable">$key</span>==<span class="number">0</span>)<span class="class"><span class="keyword">class</span>=&quot;<span class="title">active</span>&quot;@<span class="title">endif</span> <span class="title">data</span>-<span class="title">slide</span>-<span class="title">to</span>=&quot;</span>&#123;&#123;<span class="variable">$key</span>&#125;&#125;<span class="string">&quot;&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">@endforeach</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>预加载</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel使用（共享数据,debugbar）</title>
    <url>/2018/03/23/Laravel-share-debugbar/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1.多视图共享数据<br>如题，如果我们有一些固定的网站内容，如联系方式，客服扣扣等，需要放在公用视图模板的头部或底部，如这样：</p>
<span id="more"></span>
<p>在home.blade.php中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;手机：&#123;&#123;<span class="variable">$config</span>-&gt;linktel&#125;&#125; 丨 邮箱：&#123;&#123;<span class="variable">$config</span>-&gt;linkemail&#125;&#125; 丨 地址：&#123;&#123;<span class="variable">$config</span>-&gt;linkadress&#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>怎样在每个视图中都加载这些内容呢。</p>
<p>1.直接使用View::share()方法来在每个视图层加载固定内容</p>
<p>首先使用Artisan创建服务提供者</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php artisan make:provider ComposerServiceProvider</span><br></pre></td></tr></table></figure>
<p>然后在config/app.php里注册提供者。在providers里加入：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;providers&#x27;</span> =&gt; [</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		         * Laravel Framework Service Providers...</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	Illuminate\Auth\AuthServiceProvider::class,</span><br><span class="line">	Illuminate\Broadcasting\BroadcastServiceProvider::class,</span><br><span class="line">	........</span><br><span class="line">	App\Providers\RouteServiceProvider::class,</span><br><span class="line">	App\Providers\ComposerServiceProvider::class,<span class="comment">//加入刚刚创建的提供者</span></span><br><span class="line">	Stevenyangecho\UEditor\UEditorServiceProvider::class,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>然后在注册的提供者里面加入：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">View::share(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;beeasy&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是使用外观模式，也可以直接使用view()方法，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">view()-&gt;share(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;beeasy&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>这样在视图层里面就能直接使用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="variable">$abc</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>2.使用Composer单独对某个视图闭包来完成</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">//基于闭包的composer</span></span><br><span class="line">	view()-&gt;composer(<span class="string">&#x27;layouts.home&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$view</span></span>) </span>&#123;<span class="comment">//绑定公用视图的前端页面</span></span><br><span class="line">		<span class="variable">$config</span> = DB::table(<span class="string">&#x27;config&#x27;</span>)</span><br><span class="line">			-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">			-&gt;first();</span><br><span class="line">		<span class="variable">$view</span>-&gt;with(<span class="string">&#x27;config&#x27;</span>, <span class="variable">$config</span>);<span class="comment">//将数据载入到视图</span></span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就能在layouts/home.blade.php视图下直接使用config变量了</p>
<p>当然你也可以这样写：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">//基于闭包的composer</span></span><br><span class="line">	view()-&gt;composer(*, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$view</span></span>) </span>&#123;<span class="comment">//绑定公用视图的前端页面</span></span><br><span class="line">		<span class="variable">$config</span> = DB::table(<span class="string">&#x27;config&#x27;</span>)</span><br><span class="line">			-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">			-&gt;first();</span><br><span class="line">		<span class="variable">$view</span>-&gt;with(<span class="string">&#x27;config&#x27;</span>, <span class="variable">$config</span>);<span class="comment">//将数据传递到视图</span></span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就能达到第一种方法的效果</p>
<p>两种方法的区别：第一种方法是在每个视图层都传递数据，而第二种是针对某个视图层来传递数据，具体的选择方法还是要根据具体情况来定。</p>
<p>2.安装laravel-debugbar来提高开发效率<br>1). 使用 Composer 安装该扩展包：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">composer <span class="keyword">require</span> barryvdh/laravel-debugbar</span><br></pre></td></tr></table></figure>
<p>2). 安装完成后，修改 config/app.php 在 providers 数组内追加 Debugbar 的 Provider</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;providers&#x27;</span> =&gt; [</span><br><span class="line">...</span><br><span class="line">Barryvdh\Debugbar\ServiceProvider::class,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>同时在 aliases 数组内追加如下内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;aliases&#x27;</span> =&gt; [</span><br><span class="line">...</span><br><span class="line"><span class="string">&#x27;Debugbar&#x27;</span> =&gt; Barryvdh\Debugbar\Facade::class,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>3). 接下来运行以下命令生成此扩展包的配置文件 config/debugbar.php：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php artisan vendor:publish --provider=<span class="string">&quot;Barryvdh\Debugbar\ServiceProvider&quot;</span></span><br></pre></td></tr></table></figure>
<p>打开 config/debugbar.php，将 enabled 的值设置为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;enabled&#x27;</span> =&gt; env(<span class="string">&#x27;DEBUGBAR_ENABLED&#x27;</span>, <span class="literal">true</span>),</span><br></pre></td></tr></table></figure>
<p>修改完以后, Debugbar 分析器的启动状态将由 .env文件中 DEBUGBAR_ENABLED 值决定。</p>
<p>页面刷新后, 看到下图即表示运行成功。</p>
<p><img src="https://i.imgur.com/1ImUL0w.png"></p>
<p>原文地址：<a href="https://laravel-china.org/topics/2531">https://laravel-china.org/topics/2531</a></p>
<p>关闭功能只需要在debugbar.php文件中，将</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;enabled&#x27;</span> =&gt; env(<span class="string">&#x27;DEBUGBAR_ENABLED&#x27;</span>, <span class="literal">true</span>),</span><br></pre></td></tr></table></figure>
<p>改为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;enabled&#x27;</span> =&gt; env(<span class="string">&#x27;DEBUGBAR_ENABLED&#x27;</span>, <span class="literal">false</span>),</span><br></pre></td></tr></table></figure>

<p>或者将根目录下.ENV文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">DEBUGBAR_ENABLED=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>改为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">DEBUGBAR_ENABLED=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>laravel</tag>
        <tag>debugbar</tag>
      </tags>
  </entry>
  <entry>
    <title>Layui相关技巧</title>
    <url>/2021/12/30/Layui/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1.添加半遮罩请求中状态弹出层</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">load = layer.load(<span class="number">1</span>,&#123;<span class="attr">shade</span>:[<span class="number">0.5</span>,<span class="string">&#x27;#000&#x27;</span>]&#125;);</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>2.刷新弹出层父级页面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">parent.location.reload();</span><br></pre></td></tr></table></figure>

<p>3.渲染的按钮无法绑定事件时使用此方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">&#x27;click&#x27;</span>,<span class="string">&quot;#export&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>4.JQuery遍历数组对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ids=[];</span><br><span class="line">$.each(obj,<span class="function"><span class="keyword">function</span>(<span class="params">n,value</span>) </span>&#123;</span><br><span class="line">    ids.push(value.id)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<p>5.单页显示表格所有数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">table.render(&#123;</span><br><span class="line">    <span class="attr">elem</span>: <span class="string">&#x27;#test0&#x27;</span></span><br><span class="line">    ,<span class="attr">limit</span>: <span class="built_in">Number</span>.MAX_VALUE <span class="comment">// 数据表格默认全部显示</span></span><br><span class="line">    ,<span class="attr">cols</span>: [[</span><br><span class="line">        &#123;<span class="attr">field</span>:<span class="string">&#x27;nodeSort&#x27;</span>,<span class="attr">width</span>: <span class="number">180</span>, <span class="attr">title</span>: <span class="string">&#x27;节点顺序&#x27;</span>&#125;</span><br><span class="line">        ,&#123;<span class="attr">field</span>:<span class="string">&#x27;nodeName&#x27;</span>,<span class="attr">width</span>: <span class="number">180</span>, <span class="attr">title</span>: <span class="string">&#x27;节点名称&#x27;</span>&#125;</span><br><span class="line">        ,&#123;<span class="attr">field</span>:<span class="string">&#x27;userName&#x27;</span>,<span class="attr">width</span>: <span class="number">687</span>, <span class="attr">title</span>: <span class="string">&#x27;用户名称&#x27;</span>&#125;</span><br><span class="line">    ]]</span><br><span class="line">    ,<span class="attr">id</span>: <span class="string">&#x27;testReload0&#x27;</span></span><br><span class="line">    ,<span class="attr">data</span>:&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>6.区间金额验证 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(moneyVerify(<span class="string">&#x27;gteMoney&#x27;</span>,<span class="string">&#x27;lteMoney&#x27;</span>) === <span class="literal">false</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">moneyVerify</span>(<span class="params">starts,ends,msg=<span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> start = $(<span class="string">&#x27;#&#x27;</span>+starts);</span><br><span class="line">        <span class="keyword">var</span> end = $(<span class="string">&#x27;#&#x27;</span>+ends);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> pattern = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^\d+$/</span>);</span><br><span class="line">        <span class="keyword">if</span> (start.val() || end.val())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (start.val() &amp;&amp; end.val())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (pattern.exec(start.val()) == <span class="literal">null</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> layer4 = layer.open(&#123;</span><br><span class="line">                        <span class="attr">type</span>: <span class="number">1</span></span><br><span class="line">                        , <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span> <span class="comment">//防止重复弹出</span></span><br><span class="line">                        , <span class="attr">content</span>: <span class="string">&#x27;&lt;div style=&quot;padding: 20px 100px;&quot;&gt;&#x27;</span> + <span class="string">&#x27;仅支持输入0及以上的正整数&#x27;</span> + <span class="string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="line">                        , <span class="attr">btn</span>: [<span class="string">&#x27;确定&#x27;</span>]</span><br><span class="line">                        , <span class="attr">btnAlign</span>: <span class="string">&#x27;c&#x27;</span> <span class="comment">//按钮居中</span></span><br><span class="line">                        , <span class="attr">shade</span>: <span class="number">0</span> <span class="comment">//不显示遮罩</span></span><br><span class="line">                        , <span class="attr">yes</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                            layer.close(layer4);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (pattern.exec(end.val()) == <span class="literal">null</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> layer4 = layer.open(&#123;</span><br><span class="line">                        <span class="attr">type</span>: <span class="number">1</span></span><br><span class="line">                        , <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span> <span class="comment">//防止重复弹出</span></span><br><span class="line">                        , <span class="attr">content</span>: <span class="string">&#x27;&lt;div style=&quot;padding: 20px 100px;&quot;&gt;&#x27;</span> + <span class="string">&#x27;仅支持输入0及以上的正整数&#x27;</span> + <span class="string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="line">                        , <span class="attr">btn</span>: [<span class="string">&#x27;确定&#x27;</span>]</span><br><span class="line">                        , <span class="attr">btnAlign</span>: <span class="string">&#x27;c&#x27;</span> <span class="comment">//按钮居中</span></span><br><span class="line">                        , <span class="attr">shade</span>: <span class="number">0</span> <span class="comment">//不显示遮罩</span></span><br><span class="line">                        , <span class="attr">yes</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                            layer.close(layer4);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">eval</span>(start.val()) &gt; <span class="built_in">eval</span>(end.val()))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> layer6 = layer.open(&#123;</span><br><span class="line">                        <span class="attr">type</span>: <span class="number">1</span></span><br><span class="line">                        , <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span> <span class="comment">//防止重复弹出</span></span><br><span class="line">                        , <span class="attr">content</span>: <span class="string">&#x27;&lt;div style=&quot;padding: 20px 100px;&quot;&gt;&#x27;</span> + msg+<span class="string">&#x27;开始金额不能大于结束金额&#x27;</span> + <span class="string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="line">                        , <span class="attr">btn</span>: [<span class="string">&#x27;确定&#x27;</span>]</span><br><span class="line">                        , <span class="attr">btnAlign</span>: <span class="string">&#x27;c&#x27;</span> <span class="comment">//按钮居中</span></span><br><span class="line">                        , <span class="attr">shade</span>: <span class="number">0</span> <span class="comment">//不显示遮罩</span></span><br><span class="line">                        , <span class="attr">yes</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                            layer.close(layer6);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(start.val())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (pattern.exec(start.val()) == <span class="literal">null</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> layer4 = layer.open(&#123;</span><br><span class="line">                        <span class="attr">type</span>: <span class="number">1</span></span><br><span class="line">                        , <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span> <span class="comment">//防止重复弹出</span></span><br><span class="line">                        , <span class="attr">content</span>: <span class="string">&#x27;&lt;div style=&quot;padding: 20px 100px;&quot;&gt;&#x27;</span> + <span class="string">&#x27;仅支持输入0及以上的正整数&#x27;</span> + <span class="string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="line">                        , <span class="attr">btn</span>: [<span class="string">&#x27;确定&#x27;</span>]</span><br><span class="line">                        , <span class="attr">btnAlign</span>: <span class="string">&#x27;c&#x27;</span> <span class="comment">//按钮居中</span></span><br><span class="line">                        , <span class="attr">shade</span>: <span class="number">0</span> <span class="comment">//不显示遮罩</span></span><br><span class="line">                        , <span class="attr">yes</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                            layer.close(layer4);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (end.val())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (pattern.exec(end.val()) == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> layer4 = layer.open(&#123;</span><br><span class="line">                        <span class="attr">type</span>: <span class="number">1</span></span><br><span class="line">                        , <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span> <span class="comment">//防止重复弹出</span></span><br><span class="line">                        , <span class="attr">content</span>: <span class="string">&#x27;&lt;div style=&quot;padding: 20px 100px;&quot;&gt;&#x27;</span> + <span class="string">&#x27;仅支持输入0及以上的正整数&#x27;</span> + <span class="string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="line">                        , <span class="attr">btn</span>: [<span class="string">&#x27;确定&#x27;</span>]</span><br><span class="line">                        , <span class="attr">btnAlign</span>: <span class="string">&#x27;c&#x27;</span> <span class="comment">//按钮居中</span></span><br><span class="line">                        , <span class="attr">shade</span>: <span class="number">0</span> <span class="comment">//不显示遮罩</span></span><br><span class="line">                        , <span class="attr">yes</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                            layer.close(layer4);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Layui</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下MYSQL开启远程访问权限</title>
    <url>/2018/03/23/Linux-mysql-remote/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>当在Linux服务器上搭建了LNMP环境后，在服务器端本地可以访问，但是有时候需要本地先创建数据表再上传到服务器，而Linux下Mysql默认安装完成后只有本地访问的权限，需要指定用户设置访问权限才能远程访问该数据库。</p>
<span id="more"></span>
<p>首先登陆数据库：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mysql -U root -p</span><br></pre></td></tr></table></figure>
<p>输入数据库密码</p>
<p>然后运行以下sql语句：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">grant all privileges on *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>前面的root代表远程登陆时的用户名，后面的root代表密码，这样设置的是账号为root密码也为root的mysql用户，中间的’%’表示所有ip地址都能远程访问，如果要针对一台机器访问，将‘%’改为对应的ip地址即可访问数据库。</p>
<p>特别提醒不要讲账号密码设置成简单的组合，不然容易被黑。当我按照以上的操作成功远程登陆，过了几天以后。。。。<br>自己创建的数据库不见了，取而代之的是一个名为 “WARNING”的数据库，其中只有一张名为Readme的表，wtf？打开后是一条数据，大致内容是这样的：</p>
<pre><code>Your Data is downloaded and backed up on our secured servers. To recover your lost data: Send 0.1 BTC to our BitCoin Address and Contact us by eMail with your server IP Address and a Proof of Payment. Any eMail without your server IP Address and a Proof of Payment together will be ignored. You are welcome
</code></pre>
<p>翻译后是这样的：</p>
<p>您的数据已下载并备份在我们的安全服务器上。恢复你丢失的数据：发送0.1 BTC我们的比特币地址的服务器IP地址的电子邮件和付款证明联系我们。任何没有您的服务器IP地址和付款证明的电子邮件都将被忽略。不客气<br>上网查了一下原来是数据库被黑了，因为设置的账号密码太过简单，而且设置的是在所有ip上都能登陆。所以不要为了省事就不限制登陆数据库的ip地址，也不要将远程登陆的用户密码设置的过于简单。</p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux服务器搭建vsftp</title>
    <url>/2018/03/23/Linux-vsftp/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>之前一直用的是windows下的FlashFXP，现在用的Linux服务器（Centos 7.1），为了方便上传项目，安装vsftpd。</p>
<span id="more"></span>
<p>1.安装vsftpd</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">yum -y install vsftpd</span><br></pre></td></tr></table></figure>
<p>安装完毕后可以通过启动来测试是否安装完成</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">systemctl start vsftpd.service</span><br></pre></td></tr></table></figure>
<p>2.创建宿主用户及分配权限</p>
<p>安装完默认情况下是开启匿名登录的，对应的是 /var/ftp 目录，这时只要服务启动了，就可以直接连上FTP了。而这并不是我们想要的效果，一般都是按照需求来分配用户访问不同的目录。</p>
<p>新建一个ftp的宿主用户(即存在Linux系统的用户，不是虚拟用户)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">groupadd ftpuser <span class="comment">#创建用户组</span></span><br><span class="line">useradd -g root -M -d /<span class="keyword">var</span>/www -s /sbin/nologin ftpuser</span><br><span class="line"><span class="comment">#创建系统用户分配权限，只用于ftp，所以禁止登陆系统</span></span><br><span class="line">passwd ftpuser <span class="comment">#设置账户密码，这个不是很重要</span></span><br><span class="line"><span class="comment">#此处的ftpuser就是你的账户名</span></span><br><span class="line"></span><br><span class="line">chown -R ftpuser.root /<span class="keyword">var</span>/www</span><br><span class="line"><span class="comment">#把 /var/www 的所有权给ftpuser.root</span></span><br><span class="line"><span class="comment">#这里的 /var/www 就是ftp的根目录，没有的话自行创建，也可以换成其他目录</span></span><br></pre></td></tr></table></figure>
<p>这样就可以通过ftpuser用户连接FTP了。至于虚拟用户需要做的步骤就比较多了。首先虚拟用户的用户认证是通过pam方式去认证的，pam文件里面指定了认证的db文件，db文件又是通过明文用户名和密码文件生成而来，在 /etc/vsftpd/vsftpd.conf 配置文件是通过 pam_service_name=vsftpd 配置指定的，其位置是 /etc/pam.d/vsftpd，编辑该文件，把文件内容全部注释掉，加上以下两行：</p>
<p>64位系统：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">auth required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser_passwd</span><br><span class="line">account required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser_passwd</span><br></pre></td></tr></table></figure>
<p>32位系统：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">auth sufficient /lib/security/pam_userdb.so db=/etc/vsftpd/vuser_passwd</span><br><span class="line">account sufficient /lib/security/pam_userdb.so db=/etc/vsftpd/vuser_passwd</span><br></pre></td></tr></table></figure>
<p>db=/etc/vsftpd/vuser_passwd 指定了db文件的位置，接下来就是生成db文件，由于db文件是通过明文用户名和密码文件生成而来，所以先创建一个保存明文用户名和密码的文件     vuser_passwd.txt</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">vi /etc/vsftpd/vuser_passwd.txt</span><br></pre></td></tr></table></figure>
<p>这个文件的奇数行位账号，偶数行为密码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">beeasy</span><br><span class="line">beeasy1234</span><br></pre></td></tr></table></figure>
<p>保存之后通过以下命令生成db文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cd /etc/vsftpd</span><br><span class="line">db_load -T -t hash -f vuser_passwd.txt vuser_passwd.db</span><br></pre></td></tr></table></figure>
<p>如果 db_load 命令无法使用，那就需要安装db4 包</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">yum -y install db4</span><br></pre></td></tr></table></figure>
<p>如果要添加新的用户的话，在 vuser_passwd.txt 文件里面继续添加用户密码，但是要再次生成一下db文件。然后现在每个用户的具体配置是通过一个用户对应一个配置文件来实现的，且这个文件必须用FTP用户名去做文件名，建一个目录专门存放这些文件：</p>
<p>在vsftpd目录下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mkdir vuser_conf</span><br></pre></td></tr></table></figure>
<p>并且新建文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">vi vuser_conf/beeasy</span><br></pre></td></tr></table></figure>
<p>大致内容如下：</p>
<p><img src="https://i.imgur.com/mzvPvJe.png"></p>
<p>local_root 是指当前虚拟用户的访问目录</p>
<p>write_enable 设置用户是否可以写入</p>
<p>anon_upload_enable 设置虚拟用户的上传功能</p>
<p>anon_mkdir_write_enable 设置虚拟用户创建文件夹的功能</p>
<p>anon_other_write_enable 设置虚拟用户是否可以执行其他的写入操作，覆盖，删除，重命名等。</p>
<p>max_per_ip 最多允许同一账户在多少个不同的ip登陆</p>
<p>3.根据以上的信息来修改vsftpd的配置文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">anonymous_enable=NO <span class="comment"># 禁用匿名登录</span></span><br><span class="line">ascii_upload_enable=YES</span><br><span class="line">ascii_download_enable=YES</span><br><span class="line">chroot_local_user=YES <span class="comment"># 启用限定用户在其主目录下</span></span><br></pre></td></tr></table></figure>
<p>以下配置为自己添加：<br><img src="https://i.imgur.com/3lWKWbB.png"></p>
<p>然后重启vsftpd：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure>
<p>若是连接超时，请确认防火墙是否开放vsftpd服务的端口，建议开放20至22号端口以及主动模式PASV下的6000至7000端口。或者在服务器上的安全组里添加入方向的端口。</p>
<p>以及SElinux是否关闭。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Mysql相关小技巧总结在这里</title>
    <url>/2018/11/24/Mysql-sum/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1.Mysql触发器</p>
<p>适用案例，删除订单同时删除订单详情：</p>
<span id="more"></span>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">CREATE TRIGGER del_orderdetails AFTER DELETE ON ms_order <span class="keyword">FOR</span> EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">DELETE <span class="keyword">FROM</span> ms_order_details WHERE user_id=old.id;</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<p>del_orderdetails：触发器的名称 AFTER：触发时机，为BEFORE或者AFTER DELETE：触发事件，为INSERT、DELETE或者UPDATE ms_order：表示建立触发器的表明，就是在哪张表上建立触发器</p>
<p>2.不同库之间的表关联查询</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">select * <span class="keyword">from</span> db1.table1 left join db2.table2 on db1.table1.id = db2.table2.id</span><br></pre></td></tr></table></figure>
<p>只需要在表前面带上库的名称加上然后在后面加上 ‘.’ 表名</p>
<p>3.查询指定表是否存在</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">SELECT count(<span class="number">0</span>) <span class="keyword">FROM</span> information_schema.TABLES WHERE table_schema=<span class="string">&#x27;gzjs&#x27;</span> <span class="keyword">and</span> table_name=<span class="string">&#x27;user&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>需要注意的是一定要带上table_schema来判断是哪个库，不然将会在所有的数据库来检索目标数据表</p>
<p>4.查找id为奇数（偶数）的行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">select * <span class="keyword">from</span> table where id&amp;<span class="number">1</span> ;<span class="comment">//奇数</span></span><br><span class="line"></span><br><span class="line">select * <span class="keyword">from</span> table where id=(id&gt;&gt;<span class="number">1</span>)&lt;&lt;<span class="number">1</span> ;<span class="comment">//偶数</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP无极分类递归方法实现</title>
    <url>/2018/03/23/PHP-non-polar-classification/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在做权限相关模块的功能，我们需要给不同的用户指定不同功能权限。</p>
<span id="more"></span>
<p>首先我们需要一张分类的表格。类似于这样：</p>
<p><img src="https://i.imgur.com/Ix6npqC.png"></p>
<p>其中category_id表示的是分类id，category_name表示的是分类名，pid代表的就是父级分类id，我们可以将顶级的pid设置为0，以递归算法实现父级以下包涵所有子级：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无极分类递归 选择权限</span></span><br><span class="line"><span class="comment">*   <span class="doctag">@param</span>   int $assortPid   要查询分类的父级id</span></span><br><span class="line"><span class="comment">*   <span class="doctag">@param</span>   mixed   $tag 上下级分类之间的分隔符</span></span><br><span class="line"><span class="comment">*   <span class="doctag">@param</span>   array   $list包涵权限的数组</span></span><br><span class="line"><span class="comment">*   <span class="doctag">@return</span>  string  $tree返回的分类树型结构结果 </span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursiveAssort</span>(<span class="params"><span class="variable">$assortPid</span>, <span class="variable">$tag</span> = <span class="string">&#x27;&#x27;</span>,<span class="variable">$list</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line"></span><br><span class="line"><span class="variable">$assort</span> = M(<span class="string">&#x27;category&#x27;</span>)-&gt;where(<span class="string">&quot;pid = <span class="subst">$assortPid</span>&quot;</span>)-&gt;field(<span class="string">&#x27;category_id, category_name&#x27;</span>)-&gt;order(<span class="string">&quot;category_id asc&quot;</span>)-&gt;select();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$assort</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(in_array(<span class="variable">$value</span>[<span class="string">&#x27;category_id&#x27;</span>], <span class="variable">$list</span>))&#123;</span><br><span class="line"><span class="variable">$tree</span> .= <span class="string">&#x27;&lt;li&gt;&#x27;</span>.<span class="variable">$tag</span>.<span class="string">&#x27;&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot; name=&quot;permission[]&quot; value=&quot;&#x27;</span> . <span class="variable">$value</span>[<span class="string">&#x27;category_id&#x27;</span>] . <span class="string">&#x27;&quot;&gt;&#x27;</span> .<span class="string">&quot;&lt;label for=&#x27;role_2&#x27;&gt;&quot;</span>.<span class="variable">$value</span>[<span class="string">&#x27;category_name&#x27;</span>].<span class="string">&quot;&lt;/label&gt;&lt;/li&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$tree</span> .= recursiveAssort(<span class="variable">$value</span>[<span class="string">&#x27;category_id&#x27;</span>], <span class="variable">$tag</span>.<span class="string">&#x27;├ &#x27;</span>,<span class="variable">$list</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$tree</span> .= <span class="string">&#x27;&lt;li&gt;&#x27;</span>.<span class="variable">$tag</span>.<span class="string">&#x27;&lt;input type=&quot;checkbox&quot; name=&quot;permission[]&quot; value=&quot;&#x27;</span> . <span class="variable">$value</span>[<span class="string">&#x27;category_id&#x27;</span>] . <span class="string">&#x27;&quot;&gt;&#x27;</span> .<span class="string">&quot;&lt;label for=&#x27;role_2&#x27;&gt;&quot;</span>.<span class="variable">$value</span>[<span class="string">&#x27;category_name&#x27;</span>].<span class="string">&quot;&lt;/label&gt;&lt;/li&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$tree</span> .= recursiveAssort(<span class="variable">$value</span>[<span class="string">&#x27;category_id&#x27;</span>], <span class="variable">$tag</span>.<span class="string">&#x27;├ &#x27;</span>,<span class="variable">$list</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$tree</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$list</span>=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br></pre></td></tr></table></figure>
<p>那么分类id为1,3,4的分类将会自动添加钩中的样式。</p>
<p>相当于先遍历出pid=0的所有顶级菜单，然后再次调用自身查询当前顶级菜单下的子级菜单，以此类推，直到查询结束。同时以字符串拼接的方式存放在$tree里。</p>
<p>以下为工作中改良后的版本，实现的效果如下：</p>
<p><img src="https://i.imgur.com/UAcpdqu.png"></p>
<p>源代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;li <span class="class"><span class="keyword">class</span>=&quot;<span class="title">level0</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">a</span> <span class="title">href</span>=&quot;&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">i</span> <span class="title">class</span>=&quot;<span class="title">icon</span>-<span class="title">cogs</span>&quot;&gt;&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">span</span> <span class="title">class</span>=&quot;<span class="title">title</span>&quot;&gt;基础设置&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">span</span> <span class="title">class</span>=&quot;<span class="title">arrow</span>&quot;&gt;&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">ul</span> <span class="title">class</span>=&quot;<span class="title">sub</span>-<span class="title">menu</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">li</span> <span class="title">class</span>=&quot;<span class="title">level1</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">a</span> <span class="title">href</span>=&quot;&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">i</span> <span class="title">class</span>=&quot;<span class="title">icon</span>-<span class="title">home</span>&quot;&gt;&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">span</span> <span class="title">class</span>=&quot;<span class="title">title</span>&quot;&gt;管理中心&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">li</span> <span class="title">class</span>=&quot;<span class="title">level1</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">a</span> <span class="title">href</span>=&quot;&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">i</span> <span class="title">class</span>=&quot;<span class="title">icon</span>-<span class="title">globe</span>&quot;&gt;&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">span</span> <span class="title">class</span>=&quot;<span class="title">title</span>&quot;&gt;站点配置&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">li</span> <span class="title">class</span>=&quot;<span class="title">level1</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">a</span> <span class="title">href</span>=&quot;&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">i</span> <span class="title">class</span>=&quot;<span class="title">icon</span>-<span class="title">user</span>&quot;&gt;&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">span</span> <span class="title">class</span>=&quot;<span class="title">title</span>&quot;&gt;管理员&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"><span class="class"> &lt;/<span class="title">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>改版后的递归方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无极分类递归 菜单加载</span></span><br><span class="line"><span class="comment">*   <span class="doctag">@param</span>   int $assortPid   要查询分类的父级id</span></span><br><span class="line"><span class="comment">*   <span class="doctag">@param</span>   mixed   $tag 上下级分类之间的分隔符</span></span><br><span class="line"><span class="comment">*   <span class="doctag">@param</span>   array   $list包涵权限的数组</span></span><br><span class="line"><span class="comment">*   <span class="doctag">@return</span>  string  $tree返回的分类树型结构结果 </span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursiveAssort_menu</span>(<span class="params"><span class="variable">$assortPid</span>,<span class="variable">$list</span>,<span class="variable">$tag</span> = <span class="string">&#x27;&lt;li class=&quot;level0&quot;&gt;&#x27;</span>,<span class="variable">$tag2</span>=<span class="string">&#x27;&lt;ul class=&quot;sub-menu&quot;&gt;&#x27;</span>,<span class="variable">$tag3</span>=<span class="string">&#x27;&lt;span class=&quot;arrow&quot;&gt;&lt;/span&gt;&#x27;</span>,<span class="variable">$tag4</span>=<span class="string">&#x27;&lt;/ul&gt;&lt;/li&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line"><span class="variable">$assort</span> = M(<span class="string">&#x27;category&#x27;</span>)-&gt;where(<span class="string">&quot;pid = <span class="subst">$assortPid</span>&quot;</span>)-&gt;field(<span class="string">&#x27;category_id, category_name,url,icon&#x27;</span>)-&gt;order(<span class="string">&quot;category_id asc&quot;</span>)-&gt;select();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$assort</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(in_array(<span class="variable">$value</span>[<span class="string">&#x27;category_id&#x27;</span>], <span class="variable">$list</span>))&#123;</span><br><span class="line"><span class="variable">$tree</span>.=<span class="variable">$tag</span>;</span><br><span class="line"><span class="variable">$tree</span>.= <span class="string">&#x27;&lt;a href=&quot;&#x27;</span>.<span class="variable">$value</span>[<span class="string">&#x27;url&#x27;</span>].<span class="string">&#x27;&quot;&gt; &lt;i class=&quot;&#x27;</span>.<span class="variable">$value</span>[<span class="string">&#x27;icon&#x27;</span>].<span class="string">&#x27;&quot;&gt;&lt;/i&gt;&lt;span class=&quot;title&quot;&gt;&#x27;</span>.<span class="variable">$value</span>[<span class="string">&#x27;category_name&#x27;</span>].<span class="string">&#x27;&lt;/span&gt;&#x27;</span>.<span class="variable">$tag3</span>.<span class="string">&#x27;&lt;/a&gt;&#x27;</span>.<span class="variable">$tag2</span>;</span><br><span class="line"><span class="variable">$tree</span>.= recursiveAssort_menu(<span class="variable">$value</span>[<span class="string">&#x27;category_id&#x27;</span>],<span class="variable">$list</span>,<span class="string">&#x27;&lt;li class=&quot;level1&quot;&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&lt;/li&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$tree</span>.=<span class="variable">$tag4</span>;</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$tree</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>Thinkphp+jquery实现多图异步上传</title>
    <url>/2018/03/23/Thinkphp-jquery-imgupload/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>网上查找了很多方法，有的多图上传是通过html添加多个input框type=file，然后在后台遍历循环$_FILES实现一张张上传图片。还有一种就是通过jq将图片转码成base64来将图片存储成字符串的形式，然后后台将获取到的字符串通过解码成图片文件保存，这里要说的就是这种方法。</p>
<span id="more"></span>
<p>html页面主要部分如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">weui</span>-<span class="title">cells</span> <span class="title">weui</span>-<span class="title">cells_form</span>&quot; <span class="title">id</span>=&quot;<span class="title">uploader</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">weui</span>-<span class="title">cell</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">weui</span>-<span class="title">cell__bd</span>&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">weui</span>-<span class="title">uploader</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">input</span> <span class="title">name</span>=&quot;<span class="title">goods_id</span>&quot; <span class="title">value</span>=&quot;</span>&#123;<span class="variable">$goods_id</span>&#125;<span class="string">&quot; type=&quot;</span>hidden<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;div class=&quot;</span>weui-uploader__bd<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;ul class=&quot;</span>weui-uploader__files<span class="string">&quot; id=&quot;</span>uploaderFiles<span class="string">&quot;&gt;&lt;/ul&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class=&quot;</span>weui-uploader__input-box<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;div class=&quot;</span>file-img<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">                            &lt;i&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">                            &lt;p&gt;添加图片&lt;/p&gt;</span></span><br><span class="line"><span class="string">                        &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                        &lt;input id=&quot;</span>uploaderInput<span class="string">&quot; class=&quot;</span>weui-uploader__input<span class="string">&quot; name=&quot;</span>img<span class="string">&quot; type=&quot;</span>file<span class="string">&quot; accept=&quot;</span>image<span class="comment">/*&quot; capture=&quot;camera&quot; multiple=&quot;&quot; /&gt;</span></span><br><span class="line"><span class="comment">                    &lt;/div&gt;</span></span><br><span class="line"><span class="comment">                &lt;/div&gt;</span></span><br><span class="line"><span class="comment">            &lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>
<p>jq部分：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 图片手动上传 */</span></span><br><span class="line"><span class="keyword">var</span> uploadCustomFileList = [];</span><br><span class="line"><span class="keyword">var</span> uploadCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">weui.uploader(<span class="string">&#x27;#uploader&#x27;</span>, &#123;</span><br><span class="line"><span class="comment">// url: &#x27;http://localhost:8002/upload&#x27;,</span></span><br><span class="line">auto: <span class="literal">false</span>,</span><br><span class="line">type:<span class="string">&#x27;base64&#x27;</span>,</span><br><span class="line">onQueued: <span class="function"><span class="keyword">function</span> <span class="title">onQueued</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">uploadCustomFileList.push(this);</span><br><span class="line">  </span><br><span class="line"><span class="comment">//console.log(this.url.match(/url\((.*?)\)/)[1].replace(/&quot;/g, &#x27;&#x27;));</span></span><br><span class="line">&#125;,</span><br><span class="line">onBeforeQueued: <span class="function"><span class="keyword">function</span> (<span class="params">files</span>) </span>&#123;</span><br><span class="line"><span class="comment">// `this` 是轮询到的文件, `files` 是所有文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ([<span class="string">&quot;image/jpg&quot;</span>, <span class="string">&quot;image/jpeg&quot;</span>, <span class="string">&quot;image/png&quot;</span>, <span class="string">&quot;image/gif&quot;</span>].indexOf(this.type) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">weui.alert(<span class="string">&#x27;请上传图片&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 阻止文件添加</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (this.size &gt; <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>) &#123;</span><br><span class="line">weui.alert(<span class="string">&#x27;请上传不超过2M的图片&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (files.length &gt; <span class="number">3</span>) &#123; <span class="comment">// 防止一下子选择过多文件</span></span><br><span class="line">weui.alert(<span class="string">&#x27;最多只能上传3张图片，请重新选择&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (uploadCount + <span class="number">1</span> &gt; <span class="number">3</span>) &#123;</span><br><span class="line">weui.alert(<span class="string">&#x27;最多只能上传3张图片&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">++uploadCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return true; // 阻止默认行为，不插入预览图的框架</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>将上传的图片转码成base64</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 缩略图预览</span></span><br><span class="line">document.querySelector(<span class="string">&#x27;#uploaderFiles&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> target = e.target;</span><br><span class="line"><span class="comment">// var _that = this.children.length;</span></span><br><span class="line"><span class="comment">// console.log(_that);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!target.classList.contains(<span class="string">&#x27;weui-uploader__file&#x27;</span>) &amp;&amp; target) &#123;</span><br><span class="line">target = target.parentNode;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!target) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> url = target.getAttribute(<span class="string">&#x27;style&#x27;</span>) || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> id = target.getAttribute(<span class="string">&#x27;data-id&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (url) &#123;</span><br><span class="line">url = url.<span class="keyword">match</span>(/url\((.*?)\)/)[<span class="number">1</span>].replace(/<span class="string">&quot;/g, &#x27;&#x27;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">var gallery = weui.gallery(url, &#123;</span></span><br><span class="line"><span class="string">onDelete: function onDelete() &#123;</span></span><br><span class="line"><span class="string">weui.confirm(&#x27;确定删除该图片？&#x27;, function () &#123;</span></span><br><span class="line"><span class="string">var index;</span></span><br><span class="line"><span class="string">for (var i = 0, len = uploadCustomFileList.length; i &lt; len; ++i) &#123;</span></span><br><span class="line"><span class="string">var file = uploadCustomFileList[i];</span></span><br><span class="line"><span class="string">if (file.id == id) &#123;</span></span><br><span class="line"><span class="string">index = i;</span></span><br><span class="line"><span class="string">break;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">if (index !== undefined) uploadCustomFileList.splice(index, 1);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> uploadCount --;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">target.remove();</span></span><br><span class="line"><span class="string">gallery.hide();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure>
<p>这是生成缩略图预览</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;form&quot;</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr=[];</span><br><span class="line"><span class="keyword">var</span> urls=$(<span class="string">&quot;[name=upload_url]&quot;</span>).val();</span><br><span class="line">  $(<span class="string">&quot;#uploaderFiles&quot;</span>).find(<span class="string">&quot;li&quot;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,item</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> data_id = $(item).data(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">   <span class="keyword">var</span> img_url = $(item)[<span class="number">0</span>].style.backgroundImage.split(<span class="string">&quot;\&quot;&quot;</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//.split(&quot;\&quot;&quot;)[1]</span></span><br><span class="line">arr[index]=img_url;</span><br><span class="line"><span class="comment">//console.log(data_id);</span></span><br><span class="line"><span class="comment">//console.log(img_url);</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">type:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">url:urls,</span><br><span class="line">async:<span class="literal">false</span>,</span><br><span class="line">data:&#123;result:arr&#125;,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">console.log(msg);</span><br><span class="line">&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  console.log(arr);</span><br><span class="line"><span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>以上是将转码成base64的图片存到一个二维数组里面，方便后台遍历存储。</p>
<p>jquery传递的数据大致如下：</p>
<p><img src="https://i.imgur.com/tQSb2iq.png"></p>
<p>这是传递两个图片的例子，当只有一个图片的时候二维数组的长度（length）即为1。</p>
<p>后台接收处理图片：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步上传图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload_img</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (IS_AJAX) &#123;</span><br><span class="line">		<span class="variable">$data</span> = I(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">		<span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    </span><br><span class="line">			<span class="keyword">list</span>(<span class="variable">$type</span>, <span class="variable">$datas</span>) = explode(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$value</span>);<span class="comment">//获取图片类型，以及转码后的图片</span></span><br><span class="line">			<span class="keyword">if</span> (strstr(<span class="variable">$type</span>, <span class="string">&#x27;image/jpeg&#x27;</span>) !== <span class="string">&#x27;&#x27;</span>) &#123;<span class="comment">//判断图片类型</span></span><br><span class="line">				<span class="variable">$ext</span> = <span class="string">&#x27;.jpg&#x27;</span>;</span><br><span class="line">			&#125; <span class="keyword">elseif</span> (strstr(<span class="variable">$type</span>, <span class="string">&#x27;image/gif&#x27;</span>) !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">				<span class="variable">$ext</span> = <span class="string">&#x27;.gif&#x27;</span>;</span><br><span class="line">			&#125; <span class="keyword">elseif</span> (strstr(<span class="variable">$type</span>, <span class="string">&#x27;image/png&#x27;</span>) !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">				<span class="variable">$ext</span> = <span class="string">&#x27;.png&#x27;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">    </span><br><span class="line">			<span class="variable">$photo</span> = __ROOT__ . <span class="string">&quot;/uploads/Goods/&quot;</span> . date(<span class="string">&quot;Y-m-d&quot;</span>, time()) . <span class="string">&#x27;/&#x27;</span> . time() . <span class="variable">$key</span> . <span class="variable">$ext</span>;<span class="comment">//生成图片地址和文件并加上图片后缀</span></span><br><span class="line">    </span><br><span class="line">			<span class="comment">// 生成文件</span></span><br><span class="line">			file_put_contents(<span class="variable">$photo</span>, base64_decode(<span class="variable">$datas</span>), <span class="literal">true</span>);<span class="comment">//解码图片进行保存</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;ajaxReturn(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接收到的数据就是一个二维数组，内容类似：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABgk..&quot;</span>,data:image\/jpeg;base64,\/<span class="number">9</span>j\HBwYIChAKCgk..<span class="string">&quot;]</span></span><br></pre></td></tr></table></figure>
<p>大概就是二维数组中的每个数组都是一个很长的字符串，其中base64后面就是经转码后的图片。我们要做的就是将图片还原然后保存。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>tp</tag>
      </tags>
  </entry>
  <entry>
    <title>php基础算法</title>
    <url>/2018/11/24/php-basicsort/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>1.冒泡排序</strong></p>
<p>冒泡排序（Bubble Sort，台湾译为：泡沫排序或气泡排序）是一种简单的排序算法。它重复地走访过要排序的数列，依次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>
<span id="more"></span>
<p>步骤：</p>
<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>
</ol>
<p>具体代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="number">1</span>,<span class="number">43</span>,<span class="number">54</span>,<span class="number">62</span>,<span class="number">21</span>,<span class="number">66</span>,<span class="number">32</span>,<span class="number">78</span>,<span class="number">36</span>,<span class="number">76</span>,<span class="number">39</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubblesort</span>(<span class="params"><span class="variable">$arr</span></span>)</span>&#123;</span><br><span class="line">	<span class="variable">$len</span>=count(<span class="variable">$arr</span>);</span><br><span class="line">	<span class="comment">//计算需要冒泡的轮次</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>&lt;<span class="variable">$len</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">		<span class="comment">//这里的循环控制每轮两个数之间一共比较的次数，随着数字的减少，所以经历的轮数越多比较的次数越少</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="variable">$k</span>=<span class="number">0</span>;<span class="variable">$k</span>&lt;<span class="variable">$len</span>-<span class="variable">$i</span>;<span class="variable">$k</span>++)&#123;<span class="comment">//如果前一个数比后一位数大，就将两个数的位置互换，那么第一轮两两比较下来就能确定最大数了，以此类推</span></span><br><span class="line">			<span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="variable">$k</span>]&gt;<span class="variable">$arr</span>[<span class="variable">$k</span>+<span class="number">1</span>])&#123;</span><br><span class="line">				<span class="variable">$tmp</span>=<span class="variable">$arr</span>[<span class="variable">$k</span>+<span class="number">1</span>];</span><br><span class="line">				<span class="variable">$arr</span>[<span class="variable">$k</span>+<span class="number">1</span>]=<span class="variable">$arr</span>[<span class="variable">$k</span>];</span><br><span class="line">				<span class="variable">$arr</span>[<span class="variable">$k</span>]=<span class="variable">$tmp</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2.选择排序</strong></p>
<p>选择排序(Selection sort)是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小元素，然后放到排序序列末尾。以此类推，直到所有元素均排序完毕。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现思路 双重循环完成，外层控制轮数，当前的最小值。内层 控制的比较次数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">select_sort</span>(<span class="params"><span class="variable">$arr</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>,<span class="variable">$len</span>=count(<span class="variable">$arr</span>);<span class="variable">$i</span>&lt;<span class="variable">$len</span>-<span class="number">1</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">		<span class="comment">//假设最小值为初始位置</span></span><br><span class="line">		<span class="variable">$p</span>=<span class="variable">$i</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="variable">$j</span>=<span class="variable">$i</span>+<span class="number">1</span>;<span class="variable">$l</span>&lt;<span class="variable">$len</span>;<span class="variable">$j</span>++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="variable">$p</span>]&gt;<span class="variable">$arr</span>[<span class="variable">$j</span>])&#123;</span><br><span class="line">				<span class="comment">//比较发现更小的值，则记录最小值的位置，并在下次比较采用已知的最小值进行比较</span></span><br><span class="line">				<span class="variable">$p</span>=<span class="variable">$j</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//那么第一轮比较下来就确定了最小值的位置</span></span><br><span class="line">		<span class="comment">//这个时候再比较当前最小值的位置与当前轮次开始时最小值位置是否一致，如果不一致，则将两值的位置交换</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$p</span>!=<span class="variable">$i</span>)&#123;</span><br><span class="line">			<span class="variable">$tmp</span>=<span class="variable">$arr</span>[<span class="variable">$p</span>];</span><br><span class="line">			<span class="variable">$arr</span>[<span class="variable">$p</span>]=<span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">			<span class="variable">$arr</span>[<span class="variable">$i</span>]=<span class="variable">$tmp</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3.插入排序</strong></p>
<p>插入排序（Insertion Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
<p>步骤：</p>
<ol>
<li>从第一个元素开始，该元素可以认为已经被排序</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>
<li>将新元素插入到该位置中</li>
<li>重复步骤2</li>
</ol>
<p>具体代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert_sort</span>(<span class="params"><span class="variable">$arr</span></span>) </span>&#123;</span><br><span class="line">	 <span class="variable">$len</span>=count(<span class="variable">$arr</span>);</span><br><span class="line">	 <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span>&lt;<span class="variable">$len</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">	 <span class="comment">//获得当前需要比较的元素值。</span></span><br><span class="line">		 <span class="variable">$tmp</span> = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">		 <span class="comment">//内层循环控制 比较 并 插入</span></span><br><span class="line">		 <span class="keyword">for</span>(<span class="variable">$j</span>=<span class="variable">$i</span>-<span class="number">1</span>; <span class="variable">$j</span>&gt;=<span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">		 <span class="comment">//$arr[$i];//需要插入的元素; $arr[$j];//需要比较的元素</span></span><br><span class="line">			 <span class="keyword">if</span>(<span class="variable">$tmp</span> &lt; <span class="variable">$arr</span>[<span class="variable">$j</span>]) &#123;</span><br><span class="line">				 <span class="comment">//发现插入的元素要小，交换位置</span></span><br><span class="line">				 <span class="comment">//将后边的元素与前面的元素互换</span></span><br><span class="line">				 <span class="variable">$arr</span>[<span class="variable">$j</span>+<span class="number">1</span>] = <span class="variable">$arr</span>[<span class="variable">$j</span>];</span><br><span class="line">				 <span class="comment">//将前面的数设置为 当前需要交换的数</span></span><br><span class="line">				 <span class="variable">$arr</span>[<span class="variable">$j</span>] = <span class="variable">$tmp</span>;</span><br><span class="line">			 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				 <span class="comment">//如果碰到不需要移动的元素</span></span><br><span class="line">				 <span class="comment">//由于是已经排序好是数组，则前面的就不需要再次比较了。</span></span><br><span class="line">				 <span class="keyword">break</span>;</span><br><span class="line">			 &#125;</span><br><span class="line">		 &#125;</span><br><span class="line">	 &#125;</span><br><span class="line">	 <span class="comment">//将这个元素 插入到已经排序好的序列内。</span></span><br><span class="line">	 <span class="comment">//返回</span></span><br><span class="line">	 <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>4.快速排序</strong><br>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要Ο(n log n)次比较。在最坏状况下则需要Ο(n2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他Ο(n log n) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来，且在大部分真实世界的数据，可以决定设计的选择，减少所需时间的二次方项之可能性。</p>
<p>步骤：</p>
<ol>
<li>从数列中挑出一个元素，称为 “基准”（pivot）</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ol>
<p>具体代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span>(<span class="params"><span class="variable">$arr</span></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//判断参数是否是一个数组</span></span><br><span class="line">  <span class="keyword">if</span>(!is_array(<span class="variable">$arr</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">//递归出口:数组长度为1，直接返回数组</span></span><br><span class="line">  <span class="variable">$length</span> = count(<span class="variable">$arr</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$length</span>&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">  <span class="comment">//数组元素有多个,则定义两个空数组</span></span><br><span class="line">  <span class="variable">$left</span> = <span class="variable">$right</span> = <span class="keyword">array</span>();</span><br><span class="line"> <span class="comment">//使用for循环进行遍历，把第一个元素当做比较的对象</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span>&lt;<span class="variable">$length</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">	 <span class="comment">//判断当前元素的大小</span></span><br><span class="line">	 <span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="variable">$i</span>]&lt;<span class="variable">$arr</span>[<span class="number">0</span>])&#123;</span><br><span class="line">	 	<span class="variable">$left</span>[]=<span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">	 &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	 	<span class="variable">$right</span>[]=<span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">	 &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//递归调用</span></span><br><span class="line"> <span class="variable">$left</span>=quick_sort(<span class="variable">$left</span>);</span><br><span class="line"> <span class="variable">$right</span>=quick_sort(<span class="variable">$right</span>);</span><br><span class="line"> <span class="comment">//将所有的结果合并</span></span><br><span class="line"> <span class="keyword">return</span> array_merge(<span class="variable">$left</span>,<span class="keyword">array</span>(<span class="variable">$arr</span>[<span class="number">0</span>]),<span class="variable">$right</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>php-位运算</title>
    <url>/2018/08/23/php-bitwise/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><p>作用是对二进制位从低到高位对齐后进行运算，其他进制需要先转换为二进制再运算</p>
<span id="more"></span>
<table><thead><tr><th>符号</th><th>作用</th><th>举例</th><th>个人理解</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与</td><td><code>$m &amp; $n</code></td><td>全1为1，否则为0</td></tr><tr><td>|</td><td>按位或</td><td><code>$m | $n</code></td><td>全0为0，有1为1</td></tr><tr><td>^</td><td>按位异或</td><td><code>$m ^ $n</code></td><td>不同为1，相同为0</td></tr><tr><td>~</td><td>按位取反</td><td><code>~$m</code></td><td></td></tr><tr><td>&lt;&lt;</td><td>向左移位</td><td><code>$m &lt;&lt; $n</code></td><td>乘以2的n次方</td></tr><tr><td>&gt;&gt;</td><td>向右移位</td><td><code>$m &gt;&gt; $n</code></td><td>除以2的n次方</td></tr></tbody></table>

<h2 id="amp-运算符"><a href="#amp-运算符" class="headerlink" title="&amp;运算符"></a>&amp;运算符</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$m</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$n</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable">$mn</span> = <span class="variable">$m</span> &amp; <span class="variable">$n</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$mn</span>;</span><br></pre></td></tr></table></figure>
<p>运行结果为0</p>
<p>解释：将1，2分别转换为二进制为</p>
<p>00000001</p>
<p>00000010</p>
<p>在按位与的过程中，按位比较，全1为1，比较结果为00000000，所以输出0</p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="|运算符"></a>|运算符</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$m</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$n</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable">$mn</span> = <span class="variable">$m</span> | <span class="variable">$n</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$mn</span>;</span><br></pre></td></tr></table></figure>
<p>运行结果为3，同样，转换成如上的二进制</p>
<p>00000001</p>
<p>00000010</p>
<p>在按位或的过程中，有1为1，全0为0，则结果为00000011，所以输出3</p>
<h2 id="运算符-1"><a href="#运算符-1" class="headerlink" title="^运算符"></a>^运算符</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$m</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$n</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable">$mn</span> = <span class="variable">$m</span> ^ <span class="variable">$n</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$mn</span>;</span><br></pre></td></tr></table></figure>
<p>运行结果为3，同样，转换成如上的二进制</p>
<p>00000001</p>
<p>00000010</p>
<p>在按位亦或的过程中，不同为1，相同为0，所以结果为00000011,进而输出3。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>由于^运算可以推算：</p>
<p>0^1=1 0^0=0 =&gt;因此，0异或任何数等于任何数本身</p>
<p>1^0=1 1^1=0 =&gt;因此，1异或任何数等于任何数取反</p>
<p>任何数异或自己=&gt;把自己置0</p>
<p>因此可以借用^运算来达到不使用第三个变量接收来交换两个变量的值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap1</span>(<span class="params">&amp;<span class="variable">$a</span>, &amp;<span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line"> <span class="variable">$a</span> = <span class="variable">$a</span> ^ <span class="variable">$b</span>;</span><br><span class="line"> <span class="variable">$b</span> = <span class="variable">$a</span> ^ <span class="variable">$b</span>;</span><br><span class="line"> <span class="variable">$a</span> = <span class="variable">$b</span> ^ <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样计算的原因：</p>
<p>$a = $a ^ $b;</p>
<p>$b = $a ^ $b = ($a ^ $b) ^ $b = $a ^ ($b ^ $b) = $a ^ 0，根据异或特点，0与任何数异或等于任何数本身。同理可推导，$a=$b。<br>另外需要注意的是这里使用的是传引用而非传值，因为对两个变量值的改变必须要在函数外也能生效。</p>
<h2 id="运算符-2"><a href="#运算符-2" class="headerlink" title="~运算符"></a>~运算符</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$m</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable">$m1</span> = ~<span class="variable">$m</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$m1</span>;</span><br></pre></td></tr></table></figure>
<p>运行结果为-3。</p>
<p>注：在计算机中，负数以其正值的补码形式表达。</p>
<p>1: 2的32位原码为 0000 0000 0000 0000 0000 0000 0000 0010</p>
<p>2: 按位取反后为 1111 1111 1111 1111 1111 1111 1111 1101</p>
<p>由于最前面的数为1，符号位为1，即为负数，所以，以其正值的补码形式表示为：（符号位不变，按位取反，末尾加1）</p>
<p>1000 0000 0000 0000 0000 0000 0000 0011</p>
<p>所以输出为-3</p>
<h2 id="lt-lt-运算符"><a href="#lt-lt-运算符" class="headerlink" title="&lt;&lt;运算符"></a>&lt;&lt;运算符</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$m</span> = <span class="number">3</span>;</span><br><span class="line"><span class="variable">$m1</span>=<span class="variable">$m</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$m1</span>;</span><br></pre></td></tr></table></figure>
<p>运算结果为6</p>
<p>左移运算的实质是将对应的数据的二进制值逐位左移若干位，并在空出的位置上填0，最高位溢出并舍弃。</p>
<p>3的32位原码为，0000 0000 0000 0000 0000 0000 0000 0011</p>
<p>左移一位：0000 0000 0000 0000 0000 0000 0000 0110</p>
<p>所以为6</p>
<p>根据手册描述可以看出位运算可以看出向左移一位，则是实现乘2运算。由于位移操作的运算速度比乘法的 运算速度高很多。因此在处理数据的乘法运算的时，采用位移运算可以获得较快的速度。移动n位则结果为*2的n次方。<br>提示 将所有对2的乘法运算转换为位移运算，可提高程序的运行效率。</p>
<h2 id="gt-gt-运算符"><a href="#gt-gt-运算符" class="headerlink" title="&gt;&gt;运算符"></a>&gt;&gt;运算符</h2><p>右移一位，和&lt;&lt;运算符，类似，只不过这个是右移，所以是做2的除法，需要注意的是当除去的结果小于1则为零。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>php只出现一次的数字问题</title>
    <url>/2019/01/22/php-question1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>题目描述</strong></p>
<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<span id="more"></span>
<p>说明：<br>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<p>示例 1:<br>输入: [2,2,1]<br>输出: 1</p>
<p>示例 2:<br>输入: [4,1,2,1,2]<br>输出: 4</p>
<p>题目解析</p>
<p>根据题目描述，由于加上了时间复杂度必须是 O(n)，并且空间复杂度为 O(1)的条件，因此不能用排序方法，也不能使用 map 数据结构。那么可以使用位操作的特性来解这个题。</p>
<p>由异或运算的性质（相同为0，不同为1），那么出现两次的元素经过异或运算结果为0，那么数组中所有元素异或运算的结果就是剩下的唯一一个值了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="number">9</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_bin</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$a</span>^<span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> array_reduce(<span class="variable">$arr</span>,<span class="string">&#x27;get_bin&#x27;</span>,<span class="number">0</span>);<span class="comment">//将数组中所有的值用回调函数进行迭代，获得的结果即是剩下的唯一值</span></span><br></pre></td></tr></table></figure>

<p><strong>进阶版</strong></p>
<p>将原题的1个数出现一次改为2个不同的数出现一次，其他条件保持不变</p>
<p>首先通过上面的步骤获得2个不同的数的异或结果，由异或的性质得到这两个数至少有一位是不同的，即一个为0，一个为1。</p>
<p>根据异或的性质，任何一个数字异或他自己都等于0，得到这个数字二进制形式中任意一个为1的位都是我们要找的那个位数。</p>
<p>再然后，以这一位是 1 还是 0 为标准，将数组的 n 个元素分成两部分。</p>
<p>将这一位为 0 的所有元素做异或，得出的数就是只出现一次的数中的一个</p>
<p>将这一位为 1 的所有元素做异或，得出的数就是只出现一次的数中的另一个。</p>
<p>这样就解出题目。忽略寻找不同位的过程，总共遍历数组两次，时间复杂度为 O(n)。 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="number">899</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">100</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_bin</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$a</span>^<span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;两个不同数的异或结果为：&#x27;</span>.array_reduce(<span class="variable">$arr</span>,<span class="string">&#x27;get_bin&#x27;</span>,<span class="number">0</span>).<span class="string">&quot;\r\n&quot;</span>;<span class="comment">//得到两个不同数的异或结果为3</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;两个不同数的异或结果的二进制数为：&#x27;</span>.decbin(<span class="number">3</span>).PHP_EOL;<span class="comment">//将3转换为二进制为11，即得到这两个不同数的二进制位的第1位和第2位都不同</span></span><br><span class="line"><span class="comment">//我们取第一位不同，那么将原数组中所有二进制第1位为1的分为一组，将第1位为0的分为第二组，再将两个数组进行第一步中的迭代就是我们想要获得的两个不同数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bin_test</span>(<span class="params"><span class="variable">$num</span>,<span class="variable">$wei</span></span>)</span>&#123;<span class="comment">//判断二进制某位是否为1 //这里用到按位与的性质 全1为1 否则为0</span></span><br><span class="line"> <span class="variable">$b</span>=<span class="number">1</span>&lt;&lt;(<span class="variable">$wei</span>-<span class="number">1</span>);<span class="comment">//将数字1位移至目标位数//也可将目标数右移至第一位</span></span><br><span class="line"> <span class="keyword">if</span>((<span class="variable">$b</span> &amp; <span class="variable">$num</span>) &gt;<span class="number">0</span>)&#123;<span class="comment">//按位与 全1为1 否则为0</span></span><br><span class="line"> 	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> 	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$value</span>)&#123;</span><br><span class="line"> <span class="keyword">if</span>(bin_test(<span class="variable">$value</span>,<span class="number">1</span>))&#123;</span><br><span class="line"> 	<span class="variable">$arr1</span>[]=<span class="variable">$value</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> 	<span class="variable">$arr2</span>[]=<span class="variable">$value</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;其中一个数为：&#x27;</span>.array_reduce(<span class="variable">$arr1</span>,<span class="string">&#x27;get_bin&#x27;</span>,<span class="number">0</span>).PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;另一个数为：&#x27;</span>.array_reduce(<span class="variable">$arr2</span>,<span class="string">&#x27;get_bin&#x27;</span>,<span class="number">0</span>).PHP_EOL;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>php-队列和栈</title>
    <url>/2018/08/23/php-queue/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>PHP里面没有栈和队列，但是可以通过数组来模拟，主要用到以下几个函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_push   数组末尾增加一个元素 </span><br><span class="line"></span><br><span class="line">array_pop　　数组末尾删除一个元素 </span><br><span class="line"></span><br><span class="line">array_shift　数组头部删除一个元素</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>先看栈：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$dataInfo</span> =  <span class="keyword">array</span>();</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$theMax</span>= <span class="number">10</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$length</span>=<span class="number">0</span>;</span><br><span class="line"><span class="comment">// public static $stackInfo;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addData</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="built_in">self</span>::<span class="variable">$length</span> &gt;= <span class="built_in">self</span>::<span class="variable">$theMax</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       array_push(<span class="built_in">self</span>::<span class="variable">$dataInfo</span>,<span class="variable">$data</span>);</span><br><span class="line">       <span class="built_in">self</span>::<span class="variable">$length</span> ++; </span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">outData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="built_in">self</span>::<span class="variable">$length</span>&lt;=<span class="number">0</span> )&#123;</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = array_pop(<span class="built_in">self</span>::<span class="variable">$dataInfo</span>);</span><br><span class="line">        <span class="built_in">self</span>::<span class="variable">$length</span> --;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAll</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">foreach</span> (<span class="built_in">self</span>::<span class="variable">$dataInfo</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">         <span class="comment">// code..</span></span><br><span class="line">         print_r(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Stack();</span><br><span class="line"><span class="variable">$a</span>-&gt;addData(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$a</span>-&gt;addData(<span class="number">3</span>);</span><br><span class="line"><span class="variable">$a</span>-&gt;addData(<span class="number">5</span>);</span><br><span class="line"><span class="variable">$a</span>-&gt;getAll();</span><br><span class="line">print_r(<span class="variable">$a</span>-&gt;outData());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>同理，队列也是一样的 只不过可以把array_pop()换成array_shift()。<br>栈和队列的区别在于前者是先入后出，像在杯子里放东西一样，先放进去的最后才能拿出来。队列就像排队吃饭一样，先进先出。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>队列</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>php算法之二分查找</title>
    <url>/2018/11/24/phpalgorithm-erfen/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>首先是二分查找算法的前提：</strong></p>
<p>1.必须是索引数组，即键为数字</p>
<p>2.必须是已经排好序的数字，即键从小到大或者从大到小排序</p>
<span id="more"></span>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bin_sch</span>(<span class="params"><span class="variable">$array</span>,  <span class="variable">$low</span>, <span class="variable">$high</span>, <span class="variable">$k</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$low</span> &lt;= <span class="variable">$high</span>)&#123;<span class="comment">//判断开始点是否小于等于终点</span></span><br><span class="line">    <span class="variable">$mid</span> =  intval((<span class="variable">$low</span>+<span class="variable">$high</span>)/<span class="number">2</span> );<span class="comment">//向下取中点值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$array</span>[<span class="variable">$mid</span>] ==  <span class="variable">$k</span>)&#123;<span class="comment">//如果刚好等于中点值则返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$mid</span>;</span><br><span class="line">    &#125;<span class="keyword">elseif</span> ( <span class="variable">$k</span> &lt; <span class="variable">$array</span>[<span class="variable">$mid</span>])&#123;<span class="comment">//若目标值小于中点值则从起点值到中点值-1范围内继续递归查找直到找到目标值的下标</span></span><br><span class="line">        <span class="keyword">return</span>  bin_sch(<span class="variable">$array</span>, <span class="variable">$low</span>,  <span class="variable">$mid</span>-<span class="number">1</span>, <span class="variable">$k</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//若目标值大于中点值则从中点值+1到查找终点范围内继续递归查找直到找到目标值的下标</span></span><br><span class="line">        <span class="keyword">return</span>  bin_sch(<span class="variable">$array</span>, <span class="variable">$mid</span>+ <span class="number">1</span>, <span class="variable">$high</span>, <span class="variable">$k</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>$array是目标数组,$low为查找起点,$high为查找终点，$k为目标值</p>
<p>比如在100里面找到23的位置<br>首先将100/2得到两边为大于50和小于50的两部分，再判断23是小于50，就继续在小于50的范围查，继续将50/2再与23进行比较，直到等于23取其位置（键）即可。</p>
<p>因为二分查找是将目标数一直除以2进行查找，取目标数要在最后一次查找才能找出，那么有关二分法查找算法的效率（性能）问题的一点说明：</p>
<p><strong>1000个数据，约10次找出；2的10次方等于1024</strong></p>
<p><strong>100万个数据，约20次找出；2的20次方等于1048576</strong></p>
<p><strong>10亿个数据，约30次找出；</strong>  <strong>以此类推..</strong></p>
<p><strong>40亿个数据，约32次找出。</strong>   <strong>..</strong></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>一些小问题将全部总结在这里</title>
    <url>/2018/03/23/questions/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>1.使用TP3.2.3将项目部署到线上出现Undefined class constant ‘MYSQL_ATTR_INIT_COMMAND’的情况</strong></p>
<p>是因为php没有开启Mysqlnd扩展，php5以上版本已经在使用mysqlnd驱动而非mysql，至于mysqlnd可自行百度了解。且在php7则正式移除了mysql扩展。</p>
<p>在使用phpinfo()打印php信息的时候并没有显示mysqlnd扩展</p>
<span id="more"></span>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">yum install php70w-mysqlnd</span><br><span class="line">systemctl restart php-fpm</span><br></pre></td></tr></table></figure>
<p>网上搜了很久，也折腾了很久，最后发现直接安装mysqlnd扩展，并重启php，再次打印phpinfo()将出现以下内容：</p>
<p><img src="https://i.imgur.com/KopF8jI.png"></p>
<p>证明已经成功开启mysqlnd扩展，解决了之前出现的问题。</p>
<p><strong>2.FQ</strong></p>
<p>常用的有Lantern（蓝灯），还有火狐浏览器的一个好用的插件Hoxx VPN Proxy</p>
<p><strong>3.关于wamp集成环境安装</strong></p>
<p>当出现httpd.exe停止运行，一般根据提示是缺少msvcr110.dll文件，在百度上面下载即可。</p>
<p>但是，划重点：</p>
<p>当我一切vs版本库安装完之后，wamp集成环境也安装完成之后，出现了php-win停止运行。于是网上搜索了各种教程，装补丁，重装了n多次wamp还是没用。最后还好根据网友的文章尝试重新下载<br>msvcr110.dll的版本，因为我是64位系统，所以必须要安装64位系统的msvcr110.dll,其他相关的组件也必须是64位，如msvcp120.dll，装完之后问题解决。</p>
<p><strong>4.关于云服务器项目外网访问</strong></p>
<ol>
<li>确保云服务器上的安全组开启了80端口访问，即入站规则</li>
<li>确保云服务上的防火墙未阻止外网访问</li>
<li>当访问服务器ip地址超时，一般是访问的权限问题，当出现403错误，说明服务器是通的，问题出在wamp或其他集成环境的配置上</li>
</ol>
<p><strong>5.关于git的一些使用问题</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories 用于无法pull本地数据</span><br><span class="line"></span><br><span class="line">git config --<span class="keyword">global</span> user.name <span class="string">&quot;imcsi&quot;</span>  设置用户名和邮箱，不可与已存在账户重复</span><br><span class="line">git config --<span class="keyword">global</span> user.email <span class="string">&quot;imcsi@qq.com&quot;</span>  </span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;imcsi@qq.com&quot;</span>  连续三次回车设置的密码即为空，并且创建了key</span><br></pre></td></tr></table></figure>
<p>最后得到了两个文件：id_rsa和id_rsa.pub  将id_rsa里的key放在github或者码云的公钥里即可</p>
<p>基本拉取更新提交步骤<br>init + remote add origin git地址 + pull origin master –allow-unrelated-histories + wq+ add + commit +push -u origin master</p>
<p><strong>6.关于Laravel项目部署线上的问题</strong><br>当出现public目录为空白时：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">chmod -R <span class="number">777</span> storage</span><br><span class="line">chmod -R <span class="number">777</span> vendor</span><br><span class="line">chmod -R <span class="number">777</span> bootstrap/cache 均为最高权限</span><br></pre></td></tr></table></figure>
<p>当开启debug后，出现</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="built_in">RuntimeException</span> No application encryption key has been specified</span><br></pre></td></tr></table></figure>
<p>需要在config/app.php中配置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;key&#x27;</span> =&gt; <span class="string">&#x27;base64:4Q7FFSyR4YjEnA6bcEpOmeAYnUo*******&#x27;</span>,</span><br></pre></td></tr></table></figure>
<p>为具体的值，因为一般的虚拟主机无法直接读取根目录.env中的配置，所以导致无法获取到key才提示的错误。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php artisan config:cache 为生成配置项的缓存，一般用于线上配置，本地因为修改比较频繁，所以一般不会使用</span><br><span class="line"></span><br><span class="line">php artisan config:clear 清除生成配置项的缓存</span><br></pre></td></tr></table></figure>
<p><strong>7.将Laravel项目部署到虚拟主机根目录</strong></p>
<p>首先需要在跟目录创建.htaccess文件，内容如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">RewriteEngine on</span><br><span class="line"><span class="comment"># 把 www.test.com 改为你要绑定的域名.</span></span><br><span class="line">RewriteCond %&#123;HTTP_HOST&#125; ^(www.)?www.test.com$</span><br><span class="line"><span class="comment"># 把 public改为要绑定的目录.</span></span><br><span class="line">RewriteCond %&#123;REQUEST_URI&#125; !^/<span class="keyword">public</span>/</span><br><span class="line"><span class="comment"># 不要改以下两行.</span></span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line"><span class="comment"># 把 public改为要绑定的目录.</span></span><br><span class="line">RewriteRule ^(.*)$ /<span class="keyword">public</span>/$<span class="number">1</span></span><br><span class="line"><span class="comment"># 把 www.test.com 改为你要绑定的域名</span></span><br><span class="line"><span class="comment"># 把 public 改为要绑定的目录.</span></span><br><span class="line"><span class="comment"># public/ 后面是首页文件index.php, index.html……</span></span><br><span class="line">RewriteCond %&#123;HTTP_HOST&#125; ^(www.)?www.test.com$</span><br><span class="line">RewriteRule ^(/)?$ <span class="keyword">public</span>/ [L]</span><br></pre></td></tr></table></figure>
<p><strong>补充</strong><br>由于在windows系统下对图片上传的地址创建了软连接，但是上传到linux系统的云虚拟主机和windows系统下使用的软连接不一样，所以在windows系统下创建的软连接（即快捷方式）无法生效。所以所有的图片资源都无法访问。</p>
<p>在网上也没有找到确切的解决方法，最终还是使用.htaccess文件来重写url。<br>由于<code>/storage/*.jpg</code>图片路径实际指向的是 <code>/storage/app/public/*.jpg</code> 。所以我们可以将图片软连接的地址重写到实际的文件路径地址：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">RewriteRule ^(.*)/storage/(.*)$ /storage/app/<span class="keyword">public</span>/$<span class="number">2</span> [L] </span><br></pre></td></tr></table></figure>
<p>这样写就是匹配url地址storage目录下的文件指向实际的文件路径达到访问图片资源的目的。</p>
<p>Laravel项目部署到云虚拟主机上的坑比较多，由于云虚拟主机仅能够上传项目文件，所以最好还是使用云服务器来搭建Laravel项目。</p>
<p><strong>8.Laravel5微信扫码支付</strong></p>
<p>Laravel5中关于支付方面，我们可以使用前人已经造好的轮子，如yansongda的微信及支付宝集成的支付扩展包，可参考<a href="http://laravelacademy.org/post/7804.html" title="http://laravelacademy.org/post/7804.html">http://laravelacademy.org/post/7804.html</a></p>
<p>在使用的过程中我们可以简单获取到微信生成的二维码以及其他的返回参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$order</span> = [</span><br><span class="line">	<span class="string">&#x27;out_trade_no&#x27;</span> =&gt; time() . rand(<span class="number">1000</span>, <span class="number">9999</span>),</span><br><span class="line">	<span class="string">&#x27;body&#x27;</span> =&gt; <span class="string">&#x27;实例订单&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;total_fee&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">];</span><br><span class="line"><span class="variable">$result</span> = Pay::wechat()-&gt;scan(<span class="variable">$order</span>);</span><br></pre></td></tr></table></figure>
<p>但是得到的二维码地址类似于<code>weixin://wxpay/bizpayurl?pr=jFEHom4</code>，所以我们需要使用到Laravel中的另一个扩展。Simple Qrcode，是 Bacon/BaconQrCode 针对 Laravel 框架的封装版本，用于在 Laravel 中为生成二维码提供接口。可参考<a href="http://laravelacademy.org/post/2605.html" title="http://laravelacademy.org/post/2605.html">http://laravelacademy.org/post/2605.html</a></p>
<p>然而，生成的二维码是svg格式，并且嵌套了很多页面元素，使用起来很不方面。Laravel学院中有说明将svg转存为图片</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">QrCode::format(<span class="string">&#x27;png&#x27;</span>)-&gt;generate(<span class="string">&#x27;Hello,LaravelAcademy!&#x27;</span>,public_path(<span class="string">&#x27;qrcodes/qrcode.png&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p>此种方法是要将图片先保存，但是作为扫码支付，如果每次生成二维码都要先保存二维码再显示会很浪费空间，即便之后能定时删除过期的二维码也会比较麻烦。  之后在Simple Qrcode 官方网站找到了可以直接将生成的图片显示而不需要保存：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;data:image/png;base64, &#123;!! base64_encode(QrCode::format(&#x27;png&#x27;)-&gt;size(100)-&gt;generate(&#x27;Make me into an QrCode!&#x27;)) !!&#125; &quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>直接使用 base64_encode 来将二进制数据直接显示成二维码图片，免去了保存图片的步骤。</p>
<p><strong>9.Apache使用mod_expires模块缓存页面，加快访问速度</strong></p>
<p> mod_expires可以有效减少网页资源文件的重复请求，让重复的用户对指定的页面请求结果都CACHE在本地，不需要向服务器发出请求。<br>在使用之前,首先要确认一下”mod_expires”模组是否有启用.如果是自己安装Apache来搭建网站环境,我们可以透过编辑Apache的”httpd.conf”设定来开启mod_expires模块.</p>
<p>打开http.conf搜索mod_expires,你可能会找到这么一行:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#LoadModule expires_module modules/mod_expires.so</span></span><br></pre></td></tr></table></figure>
<p>去掉前面的#号，在最下面加上：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_expires.c&gt;</span><br><span class="line">ExpiresActive On</span><br><span class="line">ExpiresDefault A0</span><br><span class="line"><span class="comment"># 1 年</span></span><br><span class="line">&lt;FilesMatch “\.(flv|ico|pdf|avi|mov|ppt|doc|mp3|wmv|wav)$”&gt;</span><br><span class="line">ExpiresDefault A9030400</span><br><span class="line">&lt;/FilesMatch&gt;</span><br><span class="line"><span class="comment"># 1 星期</span></span><br><span class="line">&lt;FilesMatch “\.(jpg|jpeg|png|gif|swf)$”&gt;</span><br><span class="line">ExpiresDefault A604800</span><br><span class="line">&lt;/FilesMatch&gt;</span><br><span class="line"><span class="comment"># 3 小时</span></span><br><span class="line">&lt;FilesMatch “\.(txt|xml|js|css)$”&gt;</span><br><span class="line">ExpiresDefault A10800″</span><br><span class="line">&lt;/FilesMatch&gt;</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>
<p>同时确定在wamp安装目录<code>E:\wamp\bin\apache\apache2.4.23\modules</code> 下有mod_expires.so 这个模块文件。重启WAMP即可达到客户端缓存文件的目的。如果是虚拟主机，也可在根目录下设置.htaccess下加上以上内容。<br>Apache中php的配置文件并不是<code>E:\wamp\bin\php\php7.0.10</code>目录下的php.ini文件，而是phpForApache.ini文件。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>git</tag>
        <tag>qrcode</tag>
      </tags>
  </entry>
</search>
